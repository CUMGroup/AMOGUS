{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the AMOGUS DOCS This online documentation provides you with all the developer as well as the user documentation that you could ever wish to have! Of course, keep in mind, that this documentation is a Work In Progress and gets updated with further Planning and Implementation! Have Fun!","title":"Welcome"},{"location":"#welcome-to-the-amogus-docs","text":"This online documentation provides you with all the developer as well as the user documentation that you could ever wish to have! Of course, keep in mind, that this documentation is a Work In Progress and gets updated with further Planning and Implementation! Have Fun!","title":"Welcome to the AMOGUS DOCS"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/","text":"Table of contents Table of contents Introduction Purpose Scope Definitions, Acronyms and Abbreviations References Overview Overall Description Vision Use Case Diagram Technology Stack Specific Requirements Functionality Usability Reliability Performance Supportability Design Constraints Online User Documentation and Help System Requirements Interfaces Licensing Requirements Supporting Information 1. Introduction 1.1 Purpose This document specifies the requirements of our application. It also describes nonfunctional requirements, designconstraints, and other factors necessary to provide a complete and comprehensive description of the requirements for AMOGUS. 1.2 Scope AMOGUS is a web application for people to practice their Mathematic skills similar to the well-known language learning app Duolingo. Each User will be able to have an account in order to keep track of their progress. Admins will be able to manage the Exercises as well as giving support to the users [see Use-Case-Diagramm]. Planned Systems are: Gameplay System Streak System Level System Accounts Stats tracking 1.3 Definition, Acronyms and Abbreviations Abbreviation Explanation PAMO Project AMOGUS - The name of the Project AMOGUS Advanced Mathematic Operations and Geometrics Under Stress UCS Use Cases 1.4 References Title Date Publisher AMOGUS Blog 19.10.2022 CUMGroup Github 19.10.2022 CUMGroup 1.5 Overview This document provides an overview over the project, its use cases and requirements 2. Overall Description 2.1 Vision AMOGUS is a web application for people to practice their Mathematic skills similar to the well-known language learning app Duolingo. 2.2 Use Case Diagram 2.3 Technology Stack The technology used will be: Backend: ASP.Net Web API, Sqlite Database Frontend: Angular Web app IDE: Visual Studio 2022, Visual Studio Code Project Management: Jira, Github, Discord 3. Specific Requirements 3.1 Functionality Accounts (Login, Registering) We want to let the user create their own account to track their progress, play games and get notified if they would lose their streak. Login Use Case Register Use Case Logout Use Case Game loop This is the most important feature of our app. Here we will implement the main excercises in a playful way. Players get a random Math problem from a specific category and can then try to solve it to get points and progress in the game. Currently planned categories are: Mental Arithmetic Analysis (with Differentiation and Integration) Geometry Game loop Use Case Streak System Here we want the player to get attached to the game more by introducing a streak system. The player gets a streak which tracks the amount of consecutive days they (uninterupted) played. So if a player doesn't play till midnight, the streak gets reset. Streak Use Case Stats tracking We want to track some statistics of the player to display in a dashboard and let the Person see their progress. Stats Use Case Level System This will introduce a leveling system where players get levels by simply playing. Level Use Case Big Excercise Pool to randomly choose from As we cannot generate a lot of the problems to be solved by the computer, we have to provide a big enough excercise pool to cover a broad range of problems. 3.2 Usability The User Interface should be designed in an obvious way that the user can directly start learning without having to learn the Interface first. For further explanation we will have a \"How-To\" page covering how to play and the overall infrastructure of the site and we will have small tutorials in each excercise, helping the player when stuck. 3.3 Reliability The Server should only be down for a very short period of time when a new version of the web app is deployed. All other downtimes have to be handled as quickly as possible. 3.4 Performance Capacity The Backend should be able to handle many players at the same time. At no point should there be a waiting queue for the user. Storage All of the persistant storage will be handled by the Backend, so storage won't be a problem. Response Time As this will be a kind of game, the perfomance - e.g. checking the answer - should be as fast as possible. 3.5 Supportability Coding Standards We will use the most common clean code standards. To ensure a clean structure we will use a variation of Clean Architecture by Jason Taylor for our C# API Backend. Testing Strategy The application will have a high test coverage to ensure it is working correctly. 3.6 Design Constraints To keep our application modular and testable, we will use the MVVM pattern to connect our C# REST-API to the Angular frontend. They will communicate with the JSON format. 3.7 Online User Documentation and Help System Requirements To help our user navigating the application (if necessary) we will provide a \"How-To\" page and small tutorials in each excercise. 3.8 Interfaces User Interfaces For not logged in Users Login / Register For logged in Users: - Dashboard - Stats - Game - Level - Streak For both: - How to play - Landing page Communication Interfaces The Frontend will communicate with the Backend via the HTTP-Protocol. 3.9 Licensing Requirements Legal, Copyright and other Notices The logo is licensed to CUMGroup and is only allowed to be used for the application. We do not take responsibilty for any incorrect data or errors in the application. 4. Supporting Information For further information you can check out our blog or contact us directly: @AlexMi-Ha @Annalytic-programming @elnaz-gharoon @jas20202 @WachtelHD","title":"Software Requirements Specification"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#table-of-contents","text":"Table of contents Introduction Purpose Scope Definitions, Acronyms and Abbreviations References Overview Overall Description Vision Use Case Diagram Technology Stack Specific Requirements Functionality Usability Reliability Performance Supportability Design Constraints Online User Documentation and Help System Requirements Interfaces Licensing Requirements Supporting Information","title":"Table of contents"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#1-introduction","text":"","title":"1. Introduction"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#11-purpose","text":"This document specifies the requirements of our application. It also describes nonfunctional requirements, designconstraints, and other factors necessary to provide a complete and comprehensive description of the requirements for AMOGUS.","title":"1.1 Purpose"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#12-scope","text":"AMOGUS is a web application for people to practice their Mathematic skills similar to the well-known language learning app Duolingo. Each User will be able to have an account in order to keep track of their progress. Admins will be able to manage the Exercises as well as giving support to the users [see Use-Case-Diagramm]. Planned Systems are: Gameplay System Streak System Level System Accounts Stats tracking","title":"1.2 Scope"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#13-definition-acronyms-and-abbreviations","text":"Abbreviation Explanation PAMO Project AMOGUS - The name of the Project AMOGUS Advanced Mathematic Operations and Geometrics Under Stress UCS Use Cases","title":"1.3 Definition, Acronyms and Abbreviations"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#14-references","text":"Title Date Publisher AMOGUS Blog 19.10.2022 CUMGroup Github 19.10.2022 CUMGroup","title":"1.4 References"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#15-overview","text":"This document provides an overview over the project, its use cases and requirements","title":"1.5 Overview"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#2-overall-description","text":"","title":"2. Overall Description"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#21-vision","text":"AMOGUS is a web application for people to practice their Mathematic skills similar to the well-known language learning app Duolingo.","title":"2.1 Vision"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#22-use-case-diagram","text":"","title":"2.2 Use Case Diagram"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#23-technology-stack","text":"The technology used will be: Backend: ASP.Net Web API, Sqlite Database Frontend: Angular Web app IDE: Visual Studio 2022, Visual Studio Code Project Management: Jira, Github, Discord","title":"2.3 Technology Stack"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#3-specific-requirements","text":"","title":"3. Specific Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#31-functionality","text":"","title":"3.1 Functionality"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#accounts-login-registering","text":"We want to let the user create their own account to track their progress, play games and get notified if they would lose their streak. Login Use Case Register Use Case Logout Use Case","title":"Accounts (Login, Registering)"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#game-loop","text":"This is the most important feature of our app. Here we will implement the main excercises in a playful way. Players get a random Math problem from a specific category and can then try to solve it to get points and progress in the game. Currently planned categories are: Mental Arithmetic Analysis (with Differentiation and Integration) Geometry Game loop Use Case","title":"Game loop"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#streak-system","text":"Here we want the player to get attached to the game more by introducing a streak system. The player gets a streak which tracks the amount of consecutive days they (uninterupted) played. So if a player doesn't play till midnight, the streak gets reset. Streak Use Case","title":"Streak System"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#stats-tracking","text":"We want to track some statistics of the player to display in a dashboard and let the Person see their progress. Stats Use Case","title":"Stats tracking"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#level-system","text":"This will introduce a leveling system where players get levels by simply playing. Level Use Case","title":"Level System"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#big-excercise-pool-to-randomly-choose-from","text":"As we cannot generate a lot of the problems to be solved by the computer, we have to provide a big enough excercise pool to cover a broad range of problems.","title":"Big Excercise Pool to randomly choose from"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#32-usability","text":"The User Interface should be designed in an obvious way that the user can directly start learning without having to learn the Interface first. For further explanation we will have a \"How-To\" page covering how to play and the overall infrastructure of the site and we will have small tutorials in each excercise, helping the player when stuck.","title":"3.2 Usability"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#33-reliability","text":"The Server should only be down for a very short period of time when a new version of the web app is deployed. All other downtimes have to be handled as quickly as possible.","title":"3.3 Reliability"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#34-performance","text":"","title":"3.4 Performance"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#capacity","text":"The Backend should be able to handle many players at the same time. At no point should there be a waiting queue for the user.","title":"Capacity"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#storage","text":"All of the persistant storage will be handled by the Backend, so storage won't be a problem.","title":"Storage"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#response-time","text":"As this will be a kind of game, the perfomance - e.g. checking the answer - should be as fast as possible.","title":"Response Time"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#35-supportability","text":"","title":"3.5 Supportability"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#coding-standards","text":"We will use the most common clean code standards. To ensure a clean structure we will use a variation of Clean Architecture by Jason Taylor for our C# API Backend.","title":"Coding Standards"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#testing-strategy","text":"The application will have a high test coverage to ensure it is working correctly.","title":"Testing Strategy"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#36-design-constraints","text":"To keep our application modular and testable, we will use the MVVM pattern to connect our C# REST-API to the Angular frontend. They will communicate with the JSON format.","title":"3.6 Design Constraints"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#37-online-user-documentation-and-help-system-requirements","text":"To help our user navigating the application (if necessary) we will provide a \"How-To\" page and small tutorials in each excercise.","title":"3.7 Online User Documentation and Help System Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#38-interfaces","text":"","title":"3.8 Interfaces"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#user-interfaces","text":"For not logged in Users Login / Register For logged in Users: - Dashboard - Stats - Game - Level - Streak For both: - How to play - Landing page","title":"User Interfaces"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#communication-interfaces","text":"The Frontend will communicate with the Backend via the HTTP-Protocol.","title":"Communication Interfaces"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#39-licensing-requirements","text":"","title":"3.9 Licensing Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#legal-copyright-and-other-notices","text":"The logo is licensed to CUMGroup and is only allowed to be used for the application. We do not take responsibilty for any incorrect data or errors in the application.","title":"Legal, Copyright and other Notices"},{"location":"Developer%20Docs/1.%20Requirements/Software%20Requirements%20Specification/#4-supporting-information","text":"For further information you can check out our blog or contact us directly: @AlexMi-Ha @Annalytic-programming @elnaz-gharoon @jas20202 @WachtelHD","title":"4. Supporting Information"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Diagram/","text":"","title":"Use Case Diagram"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/","text":"Table of contents Table of contents Introduction Purpose Scope Definitions, Acronyms and Abbreviations References Overview Flow of Events\u2014Design Derived Requirements 1. Introduction 1.1 Purpose this use-case-Realization Specification describes how a user who needs math parctics can login with an account information (email, password). 1.2 Scope 1.3 Definitions, Acronyms, and Abbreviations Abbreviation Explanation PAMO Project AMOGUS - The name of the Project AMOGUS Advanced Mathematic Operations and Geometrics Under Stress UCS Use Cases 1.4 References Title Date Publisher AMOGUS Blog 19.10.2022 CUMGroup Github 19.10.2022 CUMGroup 1.5 Overview In the following the flow of events is described supported by a UMLSD. This document ends with the description of the derived requirements. 2. Flow of Events\u2014Design Use Case Login Diagram 3. Derived Requirements User Password/Email authorization-system Validate System","title":"Login UCRS"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#table-of-contents","text":"Table of contents Introduction Purpose Scope Definitions, Acronyms and Abbreviations References Overview Flow of Events\u2014Design Derived Requirements","title":"Table of contents"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#1-introduction","text":"","title":"1. Introduction"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#11-purpose","text":"this use-case-Realization Specification describes how a user who needs math parctics can login with an account information (email, password).","title":"1.1 Purpose"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#12-scope","text":"","title":"1.2 Scope"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#13-definitions-acronyms-and-abbreviations","text":"Abbreviation Explanation PAMO Project AMOGUS - The name of the Project AMOGUS Advanced Mathematic Operations and Geometrics Under Stress UCS Use Cases","title":"1.3 Definitions, Acronyms, and Abbreviations"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#14-references","text":"Title Date Publisher AMOGUS Blog 19.10.2022 CUMGroup Github 19.10.2022 CUMGroup","title":"1.4 References"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#15-overview","text":"In the following the flow of events is described supported by a UMLSD. This document ends with the description of the derived requirements.","title":"1.5 Overview"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#2-flow-of-eventsdesign","text":"Use Case Login Diagram","title":"2. Flow of Events\u2014Design"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Login%20UCRS/#3-derived-requirements","text":"User Password/Email authorization-system Validate System","title":"3. Derived Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/","text":"Table of contents Table of contents Introduction Purpose and Scope Definitions, Acronyms and Abbreviations References Overview Flow of Events\u2014Design Derived Requirements 1. Introduction 1.1 Purpose and Scope This Use-Case-Realization Specification decribes how the use case \"Register\" is handled and what processes and interactions are exchanged within the use case. 1.2 Definitions, Acronyms, and Abbreviations Abbreviation Explanation UMLSD UML sequence diagramm DB Data Base 1.3 References Title Date Publisher AMOGUS Blog 26.10.2022 CUMGroup Github 26.10.2022 CUMGroup 1.4 Overview In the following the flow of events is described supported by a UMLSD. This document ends with the description of the derived requirements. 2. Flow of Events\u2014Design The user fills in the registration form and sends a request to the authentication service. This request is forwarded to the server which will check in the DB wheter the user already exists (username or email) or not. If the user already exists then an Error is returned and the registration process is canceled. On the other hand, if the user doen't exist yet the server will create a new user, store it in the DB and answer the Authentication service with the token for the user. The user is now logged into is newly created account. 3. Derived Requirements account-system authorization-system authentication-system","title":"Register UCRS"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/#table-of-contents","text":"Table of contents Introduction Purpose and Scope Definitions, Acronyms and Abbreviations References Overview Flow of Events\u2014Design Derived Requirements","title":"Table of contents"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/#1-introduction","text":"","title":"1. Introduction"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/#11-purpose-and-scope","text":"This Use-Case-Realization Specification decribes how the use case \"Register\" is handled and what processes and interactions are exchanged within the use case.","title":"1.1 Purpose and Scope"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/#12-definitions-acronyms-and-abbreviations","text":"Abbreviation Explanation UMLSD UML sequence diagramm DB Data Base","title":"1.2 Definitions, Acronyms, and Abbreviations"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/#13-references","text":"Title Date Publisher AMOGUS Blog 26.10.2022 CUMGroup Github 26.10.2022 CUMGroup","title":"1.3 References"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/#14-overview","text":"In the following the flow of events is described supported by a UMLSD. This document ends with the description of the derived requirements.","title":"1.4 Overview"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/#2-flow-of-eventsdesign","text":"The user fills in the registration form and sends a request to the authentication service. This request is forwarded to the server which will check in the DB wheter the user already exists (username or email) or not. If the user already exists then an Error is returned and the registration process is canceled. On the other hand, if the user doen't exist yet the server will create a new user, store it in the DB and answer the Authentication service with the token for the user. The user is now logged into is newly created account.","title":"2. Flow of Events\u2014Design"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Case%20Realization%20Specification/Register%20UCRS/#3-derived-requirements","text":"account-system authorization-system authentication-system","title":"3. Derived Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/","text":"1. Brief Description This usecase allows the user to play the game where they solve math problems under time pressure to earn levels and rewards. 2. GUI Mockup 2.1. First Mockup 2.2. Reworked Mockup 3. Flow of Events 4. Special Requirements / 5. Preconditions The user is logged in The user starts a game See specification file for more information. 6. Postconditions The stat system tracks the game progress the player earns rewards based on their performance 7. Effort Estimation","title":"Gameloop Use Case"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#1-brief-description","text":"This usecase allows the user to play the game where they solve math problems under time pressure to earn levels and rewards.","title":"1. Brief Description"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#2-gui-mockup","text":"","title":"2. GUI Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#21-first-mockup","text":"","title":"2.1. First Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#22-reworked-mockup","text":"","title":"2.2. Reworked Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#3-flow-of-events","text":"","title":"3. Flow of Events"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#4-special-requirements","text":"/","title":"4. Special Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#5-preconditions","text":"The user is logged in The user starts a game See specification file for more information.","title":"5. Preconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#6-postconditions","text":"The stat system tracks the game progress the player earns rewards based on their performance","title":"6. Postconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Gameloop%20Use%20Case/#7-effort-estimation","text":"","title":"7. Effort Estimation"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Level%20Use%20Case/","text":"1. Brief Description This use case allows the user to progress in the game by collecting levels from playing. New Levels yield rewards. 2. GUI Mockup 3. Flow of Events TBD 4. Special Requirements / 5. Preconditions The user logged in The user plays games The user collects levels by answering correctly 6. Postconditions The user gets rewards as shown in the Level specification file 7. Effort Estimation","title":"Level Use Case"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Level%20Use%20Case/#1-brief-description","text":"This use case allows the user to progress in the game by collecting levels from playing. New Levels yield rewards.","title":"1. Brief Description"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Level%20Use%20Case/#2-gui-mockup","text":"","title":"2. GUI Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Level%20Use%20Case/#3-flow-of-events","text":"TBD","title":"3. Flow of Events"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Level%20Use%20Case/#4-special-requirements","text":"/","title":"4. Special Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Level%20Use%20Case/#5-preconditions","text":"The user logged in The user plays games The user collects levels by answering correctly","title":"5. Preconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Level%20Use%20Case/#6-postconditions","text":"The user gets rewards as shown in the Level specification file","title":"6. Postconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Level%20Use%20Case/#7-effort-estimation","text":"","title":"7. Effort Estimation"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Login%20Use%20Case/","text":"1. Brief Description This use case will allow a user with an account to log in to it. 2. GUI Mockup 3. Flow of Events 4. Special Requirements The user already has an account. 5. Preconditions The user is not logged in yet The user visits the login page 6. Postconditions The Server has checked the credentials and the user is now logged in. (if credentials were correct) 7. Effort Estimation 13 Story Points","title":"Login Use Case"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Login%20Use%20Case/#1-brief-description","text":"This use case will allow a user with an account to log in to it.","title":"1. Brief Description"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Login%20Use%20Case/#2-gui-mockup","text":"","title":"2. GUI Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Login%20Use%20Case/#3-flow-of-events","text":"","title":"3. Flow of Events"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Login%20Use%20Case/#4-special-requirements","text":"The user already has an account.","title":"4. Special Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Login%20Use%20Case/#5-preconditions","text":"The user is not logged in yet The user visits the login page","title":"5. Preconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Login%20Use%20Case/#6-postconditions","text":"The Server has checked the credentials and the user is now logged in. (if credentials were correct)","title":"6. Postconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Login%20Use%20Case/#7-effort-estimation","text":"13 Story Points","title":"7. Effort Estimation"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Logout%20Use%20Case/","text":"1. Brief Description This use case will allow the user to logout of their account. 2. GUI Mockup 3. Flow of Events 4. Special Requirements / 5. Preconditions The user is logged in to their account The user clicks the logout button 6. Postconditions The user is now logged out of their account 7. Effort Estimation 5 Story Points","title":"Logout Use Case"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Logout%20Use%20Case/#1-brief-description","text":"This use case will allow the user to logout of their account.","title":"1. Brief Description"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Logout%20Use%20Case/#2-gui-mockup","text":"","title":"2. GUI Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Logout%20Use%20Case/#3-flow-of-events","text":"","title":"3. Flow of Events"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Logout%20Use%20Case/#4-special-requirements","text":"/","title":"4. Special Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Logout%20Use%20Case/#5-preconditions","text":"The user is logged in to their account The user clicks the logout button","title":"5. Preconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Logout%20Use%20Case/#6-postconditions","text":"The user is now logged out of their account","title":"6. Postconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Logout%20Use%20Case/#7-effort-estimation","text":"5 Story Points","title":"7. Effort Estimation"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Register%20Use%20Case/","text":"1. Brief Description This use case will allow a user to create a new account. 2. GUI Mockup 3. Flow of Events 4. Special Requirements No account is already registered to the user's email 5. Preconditions The user is not logged in yet The user visits the register page The chosen Passwords fits the requirements (min 1 Uppercase, min 1 Lowercase, min 1 Digit, min 1 Non-Alphabetic Character, min 6 Characters) 6. Postconditions The Backend creates the new account, returning errors on collisions The user is now logged in to the newly created account 7. Effort Estimation 13 Story Points","title":"Register Use Case"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Register%20Use%20Case/#1-brief-description","text":"This use case will allow a user to create a new account.","title":"1. Brief Description"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Register%20Use%20Case/#2-gui-mockup","text":"","title":"2. GUI Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Register%20Use%20Case/#3-flow-of-events","text":"","title":"3. Flow of Events"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Register%20Use%20Case/#4-special-requirements","text":"No account is already registered to the user's email","title":"4. Special Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Register%20Use%20Case/#5-preconditions","text":"The user is not logged in yet The user visits the register page The chosen Passwords fits the requirements (min 1 Uppercase, min 1 Lowercase, min 1 Digit, min 1 Non-Alphabetic Character, min 6 Characters)","title":"5. Preconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Register%20Use%20Case/#6-postconditions","text":"The Backend creates the new account, returning errors on collisions The user is now logged in to the newly created account","title":"6. Postconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Register%20Use%20Case/#7-effort-estimation","text":"13 Story Points","title":"7. Effort Estimation"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Stats%20Use%20Case/","text":"1. Brief Description This use case allows tracking statistics of the games a user played 2. GUI Mockup 3. Flow of Events TBD 4. Special Requirements / 5. Preconditions The user is logged in The user plays games 6. Postconditions The Backend tracks the game information: - current level - questions answered - correct / incorrect answers - correct / incorrect answers ratio - time played - time per question - quickest answer - slowest answer - longest streak - answers per day - correct answers per day - answers per category See the Stats specification file Data will be displayed in the view 7. Effort Estimation","title":"Stats Use Case"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Stats%20Use%20Case/#1-brief-description","text":"This use case allows tracking statistics of the games a user played","title":"1. Brief Description"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Stats%20Use%20Case/#2-gui-mockup","text":"","title":"2. GUI Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Stats%20Use%20Case/#3-flow-of-events","text":"TBD","title":"3. Flow of Events"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Stats%20Use%20Case/#4-special-requirements","text":"/","title":"4. Special Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Stats%20Use%20Case/#5-preconditions","text":"The user is logged in The user plays games","title":"5. Preconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Stats%20Use%20Case/#6-postconditions","text":"The Backend tracks the game information: - current level - questions answered - correct / incorrect answers - correct / incorrect answers ratio - time played - time per question - quickest answer - slowest answer - longest streak - answers per day - correct answers per day - answers per category See the Stats specification file Data will be displayed in the view","title":"6. Postconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Stats%20Use%20Case/#7-effort-estimation","text":"","title":"7. Effort Estimation"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Streak%20Use%20Case/","text":"1. Brief Description This use case allows the user to see their continuous days played streak and the upcoming milestones. 2. GUI Mockup 3. Flow of Events 4. Special Requirements / 5. Preconditions The user is logged in 6. Postconditions See Streak specification file 7. Effort Estimation tbd","title":"Streak Use Case"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Streak%20Use%20Case/#1-brief-description","text":"This use case allows the user to see their continuous days played streak and the upcoming milestones.","title":"1. Brief Description"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Streak%20Use%20Case/#2-gui-mockup","text":"","title":"2. GUI Mockup"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Streak%20Use%20Case/#3-flow-of-events","text":"","title":"3. Flow of Events"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Streak%20Use%20Case/#4-special-requirements","text":"/","title":"4. Special Requirements"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Streak%20Use%20Case/#5-preconditions","text":"The user is logged in","title":"5. Preconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Streak%20Use%20Case/#6-postconditions","text":"See Streak specification file","title":"6. Postconditions"},{"location":"Developer%20Docs/1.%20Requirements/Use%20Cases/Streak%20Use%20Case/#7-effort-estimation","text":"tbd","title":"7. Effort Estimation"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Game%20View/","text":"1 First Mockup 2 Reworked Mockup","title":"Game View"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Game%20View/#1-first-mockup","text":"","title":"1 First Mockup"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Game%20View/#2-reworked-mockup","text":"","title":"2 Reworked Mockup"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Landing%20Page/","text":"1 First Mockup","title":"Landing Page"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Landing%20Page/#1-first-mockup","text":"","title":"1 First Mockup"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Stats%20View/","text":"1 First Mockup 2 Reworked Mockup","title":"Stats View"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Stats%20View/#1-first-mockup","text":"","title":"1 First Mockup"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Stats%20View/#2-reworked-mockup","text":"","title":"2 Reworked Mockup"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Teacher%20View/","text":"1 First Mockup When you click on the \"show\" button of a question: When you click on the \"New Question\" button:","title":"Teacher View"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Teacher%20View/#1-first-mockup","text":"","title":"1 First Mockup"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Teacher%20View/#when-you-click-on-the-show-button-of-a-question","text":"","title":"When you click on the \"show\" button of a question:"},{"location":"Developer%20Docs/2.%20Planning/GUI%20Mockups/Teacher%20View/#when-you-click-on-the-new-question-button","text":"","title":"When you click on the \"New Question\" button:"},{"location":"Developer%20Docs/2.%20Planning/Gameplay/Game%20Loop/","text":"","title":"Game Loop"},{"location":"Developer%20Docs/2.%20Planning/Gameplay/Level%20System/","text":"","title":"Level System"},{"location":"Developer%20Docs/2.%20Planning/Gameplay/Rewards%20%26%20Punishments/","text":"","title":"Rewards & Punishments"},{"location":"Developer%20Docs/2.%20Planning/Gameplay/Stats%20Tracking/","text":"","title":"Stats Tracking"},{"location":"Developer%20Docs/2.%20Planning/Gameplay/Streak%20System/","text":"","title":"Streak System"},{"location":"Developer%20Docs/2.%20Planning/Gameplay/Task%20Plan/","text":"","title":"Task Plan"},{"location":"Developer%20Docs/2.%20Planning/Gameplay/Tutorial/","text":"","title":"Tutorial"},{"location":"Developer%20Docs/2.%20Planning/Project/Risk%20Management/","text":"Risk Management Risk ID Category Risk Description Probability Impact Risk Score Mitigation Strategy Indicator Contingency Plan Responsible Status Last modifed date 1 Organisation Drop out of Students 3 4 12 Healthy Lifestyle, Benefits Longer absence Higher Workload, cancel unimportant featuers Alex Closed 04.06.2023 2 Technical Server down 1 8 8 Backup plan for deployment, Backup (Code, Data, etc.) Email from provider, Health Monitoring Change to Azure Alex Open 12.04.2023 3 Technical Appsettings leaked in production (private Tokens) 3 10 30 DO NOT PUSH THE REAL APPSETTINGS.JSON, if edited check git status Code Review, Pull Request Change secrets Pusher Closed 04.06.2023 4 Technical Accidential main branch wrecking 3 8 24 Git main branch protection Warning in git bash and force push Revert branch, force push recent main branch Pusher Closed 12.04.2023 5 Technical End of support for third party libraries 4 6 24 News monitoring on used 3rd party libraries Dependabot warning on github, Owasp Zap Warning Switch to own implementations, use old versions, use alternative libraries Anna Open 12.04.2023","title":"Risk Management"},{"location":"Developer%20Docs/2.%20Planning/Project/Risk%20Management/#risk-management","text":"Risk ID Category Risk Description Probability Impact Risk Score Mitigation Strategy Indicator Contingency Plan Responsible Status Last modifed date 1 Organisation Drop out of Students 3 4 12 Healthy Lifestyle, Benefits Longer absence Higher Workload, cancel unimportant featuers Alex Closed 04.06.2023 2 Technical Server down 1 8 8 Backup plan for deployment, Backup (Code, Data, etc.) Email from provider, Health Monitoring Change to Azure Alex Open 12.04.2023 3 Technical Appsettings leaked in production (private Tokens) 3 10 30 DO NOT PUSH THE REAL APPSETTINGS.JSON, if edited check git status Code Review, Pull Request Change secrets Pusher Closed 04.06.2023 4 Technical Accidential main branch wrecking 3 8 24 Git main branch protection Warning in git bash and force push Revert branch, force push recent main branch Pusher Closed 12.04.2023 5 Technical End of support for third party libraries 4 6 24 News monitoring on used 3rd party libraries Dependabot warning on github, Owasp Zap Warning Switch to own implementations, use old versions, use alternative libraries Anna Open 12.04.2023","title":"Risk Management"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ABBA%20Structure/","text":"","title":"ABBA Structure"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/","text":"ASR Summary of architectural decisions and design patters for AMOGUS 1. Tactics AMOGUS will practice 1.1 Quality attribute scenarios: Modifiability Source Stimulus Artifact Environment Response Response measure Developer Modify functionality Code Build time Make & test modification Extent to which this modification affects other functions or quality attributes System administrator Deploy new version Code & Data Run time Deployment Downtime, effort 1.2 Tactics Modularization \u2192 Split application in many modules to have clear boundaries. Increase cohesion \u2192 Only store related functionalities in one module. Reduce coupling \u2192 Communication between modules should be abstracted into interfaces and kept at a minimum to easily modify a single module. Choice of technology \u2192 The chosen technologies should always reflect the architectural needs to enforce it more easily. 2. Architecture decisions and concrete design patterns AMOGUS will follow 2.1 Architecture decisions AMOGUS will follow a service based architecture to enforce modularization and increase cohesion, hence making modifications more centralized and independent. Coupling will be reduced by following the ABBA-Scheme and only allowing communication via well defined interfaces. Backend and frontend will be completely seperated (only communicating through a REST-API) to further decouple the application. Backend and frontend will be deployed in different docker containers therefore making deployment easier. 2.2 Design patterns The backend will be using the MVC pattern to further encapsulate the behaviors (with the View being the REST-API layer). The frontend will implement the MVVM pattern to ensure a responsive feel.","title":"ASR AMOGUS"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/#asr","text":"","title":"ASR"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/#summary-of-architectural-decisions-and-design-patters-for-amogus","text":"","title":"Summary of architectural decisions and design patters for AMOGUS"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/#1-tactics-amogus-will-practice","text":"","title":"1. Tactics AMOGUS will practice"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/#11-quality-attribute-scenarios-modifiability","text":"Source Stimulus Artifact Environment Response Response measure Developer Modify functionality Code Build time Make & test modification Extent to which this modification affects other functions or quality attributes System administrator Deploy new version Code & Data Run time Deployment Downtime, effort","title":"1.1 Quality attribute scenarios: Modifiability"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/#12-tactics","text":"Modularization \u2192 Split application in many modules to have clear boundaries. Increase cohesion \u2192 Only store related functionalities in one module. Reduce coupling \u2192 Communication between modules should be abstracted into interfaces and kept at a minimum to easily modify a single module. Choice of technology \u2192 The chosen technologies should always reflect the architectural needs to enforce it more easily.","title":"1.2 Tactics"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/#2-architecture-decisions-and-concrete-design-patterns-amogus-will-follow","text":"","title":"2. Architecture decisions and concrete design patterns AMOGUS will follow"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/#21-architecture-decisions","text":"AMOGUS will follow a service based architecture to enforce modularization and increase cohesion, hence making modifications more centralized and independent. Coupling will be reduced by following the ABBA-Scheme and only allowing communication via well defined interfaces. Backend and frontend will be completely seperated (only communicating through a REST-API) to further decouple the application. Backend and frontend will be deployed in different docker containers therefore making deployment easier.","title":"2.1 Architecture decisions"},{"location":"Developer%20Docs/3.%20Architecture/Backend/ASR-AMOGUS/#22-design-patterns","text":"The backend will be using the MVC pattern to further encapsulate the behaviors (with the View being the REST-API layer). The frontend will implement the MVVM pattern to ensure a responsive feel.","title":"2.2 Design patterns"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Class%20Diagram/","text":"","title":"Class Diagram"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Component%20Diagram/","text":"","title":"Component Diagram"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Database%20Concept/","text":"","title":"Database Concept"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Deployment%20Diagram/","text":"","title":"Deployment Diagram"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Process%20Diagram/","text":"","title":"Process Diagram"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/","text":"Backend Refactor - Summary 20.04.2023 Additional Information For unit testing we have to mock some services and classes. For that we use the Moq library. To mock methods of a dependency, it has to be an interface. So we split some functions into new Interfaces to be able to test independently. The Single Responsibility Principle and the Dependency Inversion Principle were used for that. Abstractions New / Changed Interfaces ITokenFactory Added some Methods used in the authentication process to create JWT Tokens with custom Claims. Authentication can now be mocked when Unit Tested. IRoleManager This is a wrapper for the ASP.Net Identity RoleManager<TRole> object. IUserManager This is a wrapper for the ASP.Net Identity UserManager<TUser> object. IQuestionFileAccessor This is used as an abstraction for the file-access used to load and save the questions. This has to be mocked to be system independent. IStatsService Moved some functionality from IGameService to IStatsService . IDateTime Abstraction for the System Clock. Added multiple interfaces to access environment variables which wrap the ASP.Net IConfiguration object ( IJwtConfiguration , IQuestionRepoConfiguration ). Configuration variables can now be mocked. Repositories Removed Database access from all services and abstracted it via Repository Interfaces. These can now be mocked. IGameSessionRepository IUserStatsRepository IUserMedalRepository Helpers Introduced the Result<T> struct. Service methods can now return a Result<T> which either represents the value of type T or an Exception . This avoids Exception throwing (which in my opinion is bad style in this case) and makes the return of methods more meaningful and simple. Added some new Exception types. Code Changes Refactored the AuthService to increase testability of the methods. Refactored the UserService to have smaller Methods and better code style in general. Refactored the ExerciseService - replaced file-access methods with IQuestionsFileAccessor and refactored the methods. Refactored the GameService - used DRY to refactor a lot and moved some functionality to IStatsService . Formatter We finally introduced an .editorconfig which gives us the ability to quickly clean up our code (sort usings, proper indentations...) using the inbuilt formatter in Visual Studio. Misc Seperated the ExtensionMethods in the DependecyInjection files (see AMOGUS.Core , AMOGUS.Infrastructure ) to make them shorter and more cohesive. Reference For reference see the Pull Requests: #70 , #71 , #74 .","title":"Backend Refactor - Summary 20.04.2023"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#backend-refactor-summary-20042023","text":"","title":"Backend Refactor - Summary 20.04.2023"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#additional-information","text":"For unit testing we have to mock some services and classes. For that we use the Moq library. To mock methods of a dependency, it has to be an interface. So we split some functions into new Interfaces to be able to test independently. The Single Responsibility Principle and the Dependency Inversion Principle were used for that.","title":"Additional Information"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#abstractions","text":"","title":"Abstractions"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#new-changed-interfaces","text":"ITokenFactory Added some Methods used in the authentication process to create JWT Tokens with custom Claims. Authentication can now be mocked when Unit Tested. IRoleManager This is a wrapper for the ASP.Net Identity RoleManager<TRole> object. IUserManager This is a wrapper for the ASP.Net Identity UserManager<TUser> object. IQuestionFileAccessor This is used as an abstraction for the file-access used to load and save the questions. This has to be mocked to be system independent. IStatsService Moved some functionality from IGameService to IStatsService . IDateTime Abstraction for the System Clock. Added multiple interfaces to access environment variables which wrap the ASP.Net IConfiguration object ( IJwtConfiguration , IQuestionRepoConfiguration ). Configuration variables can now be mocked.","title":"New / Changed Interfaces"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#repositories","text":"Removed Database access from all services and abstracted it via Repository Interfaces. These can now be mocked. IGameSessionRepository IUserStatsRepository IUserMedalRepository","title":"Repositories"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#helpers","text":"Introduced the Result<T> struct. Service methods can now return a Result<T> which either represents the value of type T or an Exception . This avoids Exception throwing (which in my opinion is bad style in this case) and makes the return of methods more meaningful and simple. Added some new Exception types.","title":"Helpers"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#code-changes","text":"Refactored the AuthService to increase testability of the methods. Refactored the UserService to have smaller Methods and better code style in general. Refactored the ExerciseService - replaced file-access methods with IQuestionsFileAccessor and refactored the methods. Refactored the GameService - used DRY to refactor a lot and moved some functionality to IStatsService .","title":"Code Changes"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#formatter","text":"We finally introduced an .editorconfig which gives us the ability to quickly clean up our code (sort usings, proper indentations...) using the inbuilt formatter in Visual Studio.","title":"Formatter"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#misc","text":"Seperated the ExtensionMethods in the DependecyInjection files (see AMOGUS.Core , AMOGUS.Infrastructure ) to make them shorter and more cohesive.","title":"Misc"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Refactor/#reference","text":"For reference see the Pull Requests: #70 , #71 , #74 .","title":"Reference"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/","text":"SAD Software Architecture Documentation 1. Introduction 1.1 Purpose This software architecture document provides a comprehensive overview of the architecture of the project AMOGUS. It serves as a communication medium between the software architect and other project team members regarding architecturally significant decisions which have been made. 1.2 Scope This document defines the architecture of AMOGUS. It is directly related to the ABBA-Scheme and the ASR. 1.3 Definitions, Acronyms and Abbreviations AMOGUS : the project acromym for A dvanced M athmetic O perations A nd G eometrics U nder S tress ABBA-Scheme : the A mogus B asic B ackend A pi defines the internal backend architecture. 1.4 References Figures: Fig. 0 Fig. 1 Fig. 2 Fig. 3 Documents: ABBA-Scheme DB Concept 1.5 Overview The following sections describes the architecture more detailed. Introduction 1.1 Purpose 1.2 Scope 1.3 Definitions, Acronyms and Abbreviations 1.4 References 1.5 Overview Architectural Representation Architectural Goals and Constrains Use Case View 4.1 Use Case Realizations Logical View Process View Deployment View Implementation View 8.1 Overview 8.2 Layers Data View Size and Performance Quality 2. Architectural Represantation For AMOGUS the basic architecture is split into services: User Service: all userbased operations (roles, delete) Auth Service: authorization of users (login and register) Stats Service: get and update stats of a user Exercise Service: get and validate exercises Game Service: orchestrates the exercises and stats Streak Service: check current streak and update if necessary 3. Architectural Goals and Constraints In this section, all software requirements and objectives relevant to AMOGUS that influence the architecture are covered. the architecture should prevent data manipulation via JavaScript the architecture should ensure account security the architecture should ensure easy changeability and modularization easy deployment of individual components should be possible backend and frontend should be seperated to further decouple the application to further simplify the deployment, the frontend and backend are deployed in separate docker containers Special constraints that may apply: small team with little experience small amount of time for implementation 4. Use-Case-View Following Use-Cases are found in AMOGUS: Login / Register Track process with stats view Practice Math with a game session Manage exercises as an admin 4.1 Use-Case Realizations Use-Case Realization for login. Use-Case Realization for register. 5. Logical View Fig. 0 6. Process View Fig. 1 7. Deployment View Fig. 2 8. Implementation View 8.1 Overview AMOGUS implementation view has 4 Layers: Infrastructure API Core Frontend The first three together is the backend. The API layer has the ApiControllers components which use dependency injection for the UserService and the Authservice in the Infrastructure layer as well as the StreakService, StatsService and GameService in the Core layer. It's also the communication point for the ApiService in the Frontend layer. Within the Infrastructure layer the UserService and the AuthService both communicate with each other and use the ApplicationDbContext. The GameService in the Core layer uses the ExerciseService and communicates with the StatsService. All the services in the Frontend layer use the ApiService to be able to communicate with the API layer. 8.2 Layers Fig. 3 9. Data View Data, such as userdata and session data, will be stored using a database. During development AMOGUS will store it's data in an SQLite and for production it will use MariaDB. The db-concept can be seen here . Originally the complex questions from a session would also be stored in the database. For simplicity reasons and to reduce data in the database this idea was discarded. The 'Questions'-table (as seen in the original db-concept) is no longer part of the database. Instead, the complex questions will be recorded as JSON objects which can easily be modified. 10. Size and Performance The frontend performance is most likely going to stay in a efficent state. As most of the logic is rather simple and just provides/generates some basic information. Other than that the design choice will take a small percentage of the performance. So our goal is to stay efficient and don\u2019t over engineer the frontend. The backend handles the major data processing and generation for our questions, therefore we can\u2019t prevent some size and performance issues. Some questions simply can\u2019t be generated in a reasonable time so we will use some auto generated questions mixed with generated ones to keep our performance as good as possible. This also describes our goal for the backend, to use as low performance as possible. Our database will linearly scale with the amount of users and questions, which allows us to regulate our size concerns. In case we get more users than expected we can easily extend our Hardware. :D Our general Goal is to reach the best UX possible, thus we should keep in mind that a long waiting period might lose the interest of each user. To prevent this issue we target a maximum waiting period of 2s on initial load and whilst on the page about 1s. 11. Quality We are trying to ensure a specific quality-standard by introducing multiple architecture tactics concerning the design attribute Modifiability. AMOGUS will follow a service based architecture to enforce modularization and increase cohesion, hence making modifications more centralized and independent. Coupling will be reduced by following the ABBA-Scheme and only allowing communication via well defined interfaces. Backend and frontend will be completely seperated (only communicating through a REST-API) to further decouple the application. Backend and frontend will be deployed in different docker containers therefore making deployment easier.","title":"SAD"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#sad","text":"","title":"SAD"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#software-architecture-documentation","text":"","title":"Software Architecture Documentation"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#1-introduction","text":"","title":"1. Introduction"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#11-purpose","text":"This software architecture document provides a comprehensive overview of the architecture of the project AMOGUS. It serves as a communication medium between the software architect and other project team members regarding architecturally significant decisions which have been made.","title":"1.1 Purpose"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#12-scope","text":"This document defines the architecture of AMOGUS. It is directly related to the ABBA-Scheme and the ASR.","title":"1.2 Scope"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#13-definitions-acronyms-and-abbreviations","text":"AMOGUS : the project acromym for A dvanced M athmetic O perations A nd G eometrics U nder S tress ABBA-Scheme : the A mogus B asic B ackend A pi defines the internal backend architecture.","title":"1.3 Definitions, Acronyms and Abbreviations"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#14-references","text":"Figures: Fig. 0 Fig. 1 Fig. 2 Fig. 3 Documents: ABBA-Scheme DB Concept","title":"1.4 References"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#15-overview","text":"The following sections describes the architecture more detailed. Introduction 1.1 Purpose 1.2 Scope 1.3 Definitions, Acronyms and Abbreviations 1.4 References 1.5 Overview Architectural Representation Architectural Goals and Constrains Use Case View 4.1 Use Case Realizations Logical View Process View Deployment View Implementation View 8.1 Overview 8.2 Layers Data View Size and Performance Quality","title":"1.5 Overview"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#2-architectural-represantation","text":"For AMOGUS the basic architecture is split into services: User Service: all userbased operations (roles, delete) Auth Service: authorization of users (login and register) Stats Service: get and update stats of a user Exercise Service: get and validate exercises Game Service: orchestrates the exercises and stats Streak Service: check current streak and update if necessary","title":"2. Architectural Represantation"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#3-architectural-goals-and-constraints","text":"In this section, all software requirements and objectives relevant to AMOGUS that influence the architecture are covered. the architecture should prevent data manipulation via JavaScript the architecture should ensure account security the architecture should ensure easy changeability and modularization easy deployment of individual components should be possible backend and frontend should be seperated to further decouple the application to further simplify the deployment, the frontend and backend are deployed in separate docker containers Special constraints that may apply: small team with little experience small amount of time for implementation","title":"3. Architectural Goals and Constraints"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#4-use-case-view","text":"Following Use-Cases are found in AMOGUS: Login / Register Track process with stats view Practice Math with a game session Manage exercises as an admin","title":"4. Use-Case-View"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#41-use-case-realizations","text":"Use-Case Realization for login. Use-Case Realization for register.","title":"4.1 Use-Case Realizations"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#5-logical-view","text":"Fig. 0","title":"5. Logical View"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#6-process-view","text":"Fig. 1","title":"6. Process View"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#7-deployment-view","text":"Fig. 2","title":"7. Deployment View"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#8-implementation-view","text":"","title":"8. Implementation View"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#81-overview","text":"AMOGUS implementation view has 4 Layers: Infrastructure API Core Frontend The first three together is the backend. The API layer has the ApiControllers components which use dependency injection for the UserService and the Authservice in the Infrastructure layer as well as the StreakService, StatsService and GameService in the Core layer. It's also the communication point for the ApiService in the Frontend layer. Within the Infrastructure layer the UserService and the AuthService both communicate with each other and use the ApplicationDbContext. The GameService in the Core layer uses the ExerciseService and communicates with the StatsService. All the services in the Frontend layer use the ApiService to be able to communicate with the API layer.","title":"8.1 Overview"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#82-layers","text":"Fig. 3","title":"8.2 Layers"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#9-data-view","text":"Data, such as userdata and session data, will be stored using a database. During development AMOGUS will store it's data in an SQLite and for production it will use MariaDB. The db-concept can be seen here . Originally the complex questions from a session would also be stored in the database. For simplicity reasons and to reduce data in the database this idea was discarded. The 'Questions'-table (as seen in the original db-concept) is no longer part of the database. Instead, the complex questions will be recorded as JSON objects which can easily be modified.","title":"9. Data View"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#10-size-and-performance","text":"The frontend performance is most likely going to stay in a efficent state. As most of the logic is rather simple and just provides/generates some basic information. Other than that the design choice will take a small percentage of the performance. So our goal is to stay efficient and don\u2019t over engineer the frontend. The backend handles the major data processing and generation for our questions, therefore we can\u2019t prevent some size and performance issues. Some questions simply can\u2019t be generated in a reasonable time so we will use some auto generated questions mixed with generated ones to keep our performance as good as possible. This also describes our goal for the backend, to use as low performance as possible. Our database will linearly scale with the amount of users and questions, which allows us to regulate our size concerns. In case we get more users than expected we can easily extend our Hardware. :D Our general Goal is to reach the best UX possible, thus we should keep in mind that a long waiting period might lose the interest of each user. To prevent this issue we target a maximum waiting period of 2s on initial load and whilst on the page about 1s.","title":"10. Size and Performance"},{"location":"Developer%20Docs/3.%20Architecture/Backend/SoftwareArchitectureDocumentation/#11-quality","text":"We are trying to ensure a specific quality-standard by introducing multiple architecture tactics concerning the design attribute Modifiability. AMOGUS will follow a service based architecture to enforce modularization and increase cohesion, hence making modifications more centralized and independent. Coupling will be reduced by following the ABBA-Scheme and only allowing communication via well defined interfaces. Backend and frontend will be completely seperated (only communicating through a REST-API) to further decouple the application. Backend and frontend will be deployed in different docker containers therefore making deployment easier.","title":"11. Quality"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Utility-Tree/","text":"Utility Tree Quality attribute scenarios Quality attribute Source Stimulus Artifact Environment Response Response measure Modifiability Developer Modify functionality Code Build time Make & test modification Extent to which this modification affects other functions or quality attributes Modifiability System administrator Deploy new version Code & Data Run time Deployment Downtime, effort Modifiability Developer New feature Code Build time Add & test feature Time Modifiability End user Website usage Data Run time Process data & update database Responsetime, db-size Modifiability Developer Choose language Code Initiation time Team knows language Development time & frustration","title":"Utility Tree"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Utility-Tree/#utility-tree","text":"","title":"Utility Tree"},{"location":"Developer%20Docs/3.%20Architecture/Backend/Utility-Tree/#quality-attribute-scenarios","text":"Quality attribute Source Stimulus Artifact Environment Response Response measure Modifiability Developer Modify functionality Code Build time Make & test modification Extent to which this modification affects other functions or quality attributes Modifiability System administrator Deploy new version Code & Data Run time Deployment Downtime, effort Modifiability Developer New feature Code Build time Add & test feature Time Modifiability End user Website usage Data Run time Process data & update database Responsetime, db-size Modifiability Developer Choose language Code Initiation time Team knows language Development time & frustration","title":"Quality attribute scenarios"},{"location":"Developer%20Docs/4.%20Testing/Testplan/","text":"Testplan AMOGUS Test types Unit tests Beta tests Target test coverage The target test coverage is 60% in terms of unit testing line and branch coverage. Goal is to test the services functionalities. Testing tools Unit testing xUnit : Unit test framework Moq : Mock framework to mock services Beta tests Humans : Some random dudes who will test the application e. g. Luca Hackl Test server Test case management Github Actions will show the amount of tests passed and failed per pull request. Test cases Unit test cases Auth Service # Tested method Objective Input Expected Result 1 CreateRolesAsync CreateRolesAsync_WhenGivenRoles_CreatesThem UserRoles class All Roles correctly created in the RoleManager 2 CreateRolesAsync CreateRolesAsync_WhenGivenRoles_AndRoleAlreadyExists_DoesNotCreateIt UserRoles class No roles created in the RoleManager 3 LoginUserAsync LoginUserAsync_WhenGivenUserData_AndEmailWrong_Exception Wrong email Faulted result 4 LoginUserAsync LoginUserAsync_WhenGivenUserData_AndPasswordWrong_Exception Wrong password Faulted result 5 LoginUserAsync LoginUserAsync_WhenGivenUserData_AndAllCorrect_LoginUser Correct user data Successful result and Auth Token 6 RegisterUserAsync RegisterUserAsync_WhenValidationFails_Exception user data with failed validation Faulted result 7 RegisterUserAsync RegisterUserAsync_WhenGivenRegisterModel_AndUserAlreadyExists_Exception user data that already exists Faulted result 8 RegisterUserAsync RegisterUserAsync_WhenGivenRegisterModel_AndFailedToCreate_Exception valid data but cant create user Faulted result 9 RegisterUserAsync RegisterUserAsync_WhenGivenRegisterModel_AndRoleDoesNotExist_Exception valid user data but non existent role Faulted result 10 RegisterUserAsync RegisterUserAsync_WhenGivenRegisterModel_AndEverythingIsFine_LoginUser valid user data and valid role Successful result and Auth Token ExerciseService # Tested method Objective Input Expected Result 11 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsNotRandomMental_ AndOrigQuestionNotFound_ReturnsFalse Non random question, that does not exist false 12 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsRandomMental_ AndAnswerIsNotCalculable_ReturnsFalse random question that cannot be calculated false 13 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsNotRandomMental_ AndQuestionExists_ReturnAnswerIsCorrect non random question with correct answer true 14 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsNotRandomMental_ AndQuestionExists_ReturnAnswerIsNotCorrect non random question with incorrect answer false 15 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsRandomMental_ ReturnAnswerIsCorrect random question with correct answer true 16 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsRandomMental_ ReturnAnswerIsNotCorrect random question with incorrect answer false GameService # Tested method Objective Input Expected Result 17 NewSession NewSession_WithoutQuestionAmount_ReturnsSessionWith10Questions no amount specified Session with 10 questions 18 NewSession NewSession_WithQuestionAmount1_ReturnsSessionWith1Question amount should be 10 Session with 10 questions 19 EndSessionAsync EndSessionAsync_AndUserNotFound_ReturnsException Wrong userId Faulted result 20 EndSessionAsync EndSessionAsync_AndUserFound_AndValidationFails_ReturnsException non valid session model Faulted result 21 EndSessionAsync EndSessionAsync_AndUserFound_AndSessionValid_ButDbNotAffected_ReturnsFaulted Session cannot be saved Faulted result 22 EndSessionAsync EndSessionAsync_AndUserFound_AndSessionValid_AndDbAffected_ReturnsSuccess session can be saves Successful result UserService # Tested method Objective Input Expected Result 23 GetUserAsync GetUserAsync_WhenGivenAUserId_AndNoUserWithThatIdExists_Exception wrong userId Faulted result 24 GetUserAsync GetUserAsync_WhenGivenAUserId_AndUserWithThatIdExists_ReturnsUser valid userid Successful result and user 25 IsInRoleAsync IsInRoleAsync_WhenGivenAUserId_AndRole_AndUserNotInRole_ReturnsFalse userId not in role false 26 IsInRoleAsync IsInRoleAsync_WhenGivenAUserId_AndRole_AndUserInRole_ReturnsTrue userId in role true 27 DeleteUserAsync DeleteUserAsync_WhenGivenAUserId_AndUserNotFound_ReturnsFaulted wrong userId Faulted result 28 DeleteUserAsync DeleteUserAsync_WhenGivenAUserId_AndUserManagerCantDelete_Exception valid userId but userManager cannot delete Faulted result 29 DeleteUserAsync DeleteUserAsync_WhenGivenAUserId_AndEverythingIsFine_ReturnTrue valid userId Successful result and user is deleted TeacherService # Tested method Objective Input Expected Result 30 AddQuestionAsync AddQuestionAsync_WhenGivenQuestion_AndEverythingIsFine_AddsQuestionAndReturnsQuestion valid Question Successful result and Question 31 AddQuestionAsync AddQuestionAsync_WhenGivenQuestion_AndIOException_ReturnsException empty Question faulted result 32 DeleteQuestionByIdAsync DeleteQuestionByIdAsync_WhenGivenQuestionId_AndQuestionDoesNotExist_ReturnsException invalid QuestionID faulted result 33 DeleteQuestionByIdAsync DeleteQuestionByIdAsync_WhenGivenQuestionId_AndQuestionFileNotAccessible_ReturnsException valid QuestionID but not accessible faulted result 34 DeleteQuestionByIdAsync DeleteQuestionByIdAsync_WhenGivenQuestionId_AndEverythingIsFine_ReturnsTrue_AndQuestionDeleted valid QuestionID Successful result and question deleted 35 GetQuestionById GetQuestionById_WhenGivenQuestionId_AndQuestionDoesNotExist_ReturnsException invalid QuestionID Faulted result 36 GetQuestionById GetQuestionById_WhenGivenQuestionId_AndQuestionDoesExist_ReturnsQuestion valid QuestionID Successful result and question StreaksService # Tested method Objective Input Expected Result 37 ReadStreakAsync ReadStreakAsync_WhenGivenAUserId_AndUserHasNoStats_Exception UserID with no stats Faulted result 38 ReadStreakAsync ReadStreakAsync_WhenGivenAUserId_AndUserHasStats_ReturnsCurrentStreak valid userid with stats Successful result and current streak 39 UpdateAllStreaksAsync UpdateAllStreaksAsync_WhenPlayerHasNotPlayedToday_AndNotLongestStreak_StreakIsSetTo0 player that hasn't played today streak set to 0 40 UpdateAllStreaksAsync UpdateAllStreaksAsync_WhenPlayerHasNotPlayedToday_AndLongestStreak_StreakIsSetTo0_ButKeepLongest player that hasn't played today streak set to 0 and longest streak kept 41 UpdateAllStreaksAsync UpdateAllStreaksAsync_WhenPlayerHasPlayedToday_ButNotLongestStreak_StreakIsNotLost player that has played today streak is kept 42 UpdateAllStreaksAsync UpdateAllStreaksAsync_StreaksOfAllPlayersAreUpdated multiple players that have not played today all streaks set to 0 StatsService # Tested method Objective Input Expected Result 43 GetUserStatsAsync GetUserStatsAsync_WhenGivenAUserId_AndUserHasNoStats_Exception userid that has no stats Faulted result 44 GetUserStatsAsync GetUserStatsAsync_WhenGivenAUserId_AndUserHasStats_ReturnsStats userId that has stats Successful result and stats 45 GetDetailedUserStatsModelAsync GetDetailedUserStatsModelAsync_WhenGivenAUserId_AndUserHasNoStats_Exception userid that has no stats Faulted result 46 GetDetailedUserStatsModelAsync GetDetailedUserStatsModelAsync_WhenGivenAUserId_EverythingAlright_ReturnsDetailedUserstats userId that has stats Successful result and detailed UserStatsApiModel 47 UpdateUserStatsAsync(UserStats userStats) UpdateUserStatsAsync_WhenGivenUserStats_AndValidationFails_ReturnsFalse invalid UserStats false 48 UpdateUserStatsAsync(UserStats userStats) UpdateUserStatsAsync_WhenGivenUserStats_UpdateInDbFails_ReturnsFalse valid UserStats but repository failed updating false 49 UpdateUserStatsAsync(UserStats userStats) UpdateUserStatsAsync_WhenGivenUserStats_AndEverythingIsFine_ReturnsTrue valid UserStats true 50 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndValidationFails_ReturnsFalse invalid GameSession, Answers and user false 51 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_UpdateInDbFails_ReturnsFalse valid GameSession, Answers and user but update in db fails false 52 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndEverythingIsFine_ReturnsTrue valid GameSession, Answers and user true 53 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndEverythingIsFine_StatsAreUpdatedCorrectly valid GameSession, Answers and user true and stats updated correctly 54 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndEverythingIsFine_StatsAreUpdatedCorrectly2 valid GameSession, Answers and user (other values than above so other changes happen) true and stats updated correctly 55 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndUserHasNotPlayedYet_StreakIsUpdated like the above but playedtoday is false played today is now true and streak is updated 56 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndUserHasPlayedAlready_StreakIsNotIncreased like the above but playedtoday is true streak is not increased LeaderboardService # Tested method Objective Input Expected Result 57 GetLeaderboardAsync GetLeaderboardAsync_ReturnsCorrectObject UserStats mock Correct Object hirachy MentalExerciseFactory # Tested method Objective Input Expected Result 58 Median Median_Returns0_ForEmptyArray Empty Array 0 59 Median Median_ReturnsFirstElement_ForArrayWithSize1 Array with 1 Element The first element 60 Median Median_ReturnsAverage_ForArrayWithSize2 Array with 2 Elements Average 61 Median Median_ReturnsMedian_ForSortedArrayWithEvenCount Sorted Array with even Elements Correct median 62 Median Median_ReturnsMedian_ForSortedArrayWithOddCount Sorted Array with Odd Elements Correct median 63 Median Median_ReturnsMedian_ForRandomArrayWithEvenCount Shuffled Array with even Elements Correct median 64 Median Median_ReturnsMedian_ForRandomArrayWithOddCount Shuffled Array with Odd Elements Correct median 65 CalcAnswer CalcAnswer_ReturnsEmpty_WithEmptyQuestion Empty Question Empty String 66 CalcAnswer CalcAnswer_SolvesEquation_WithXInQuestion Equation with x set of solutions 67 CalcAnswer CalcAnswer_SolvesExpression_WithQuestion Expressions without x Correct answer for the expressions 68 CalcAnswer CalcAnswer_ReturnsEmpty_ForXInStatement Expressions with x empty string Game Session Validator # Tested method Objective Input Expected Result 69 Rules SessionId_CannotBeEmpty Empty sessionid false 70 Rules SessionId_ShouldBeValidGuid invalid guid false 71 Rules SessionId_ShouldBeValid valid guid true 72 Rules Playtime_ShouldNotBeSmallerThanZero -1 false 73 Rules Playtime_CanBeZeroOrBigger 0, 0.1, 1 true 74 Rules CorrectAnswersCount_ShouldNotBeSmallerThanZero -1 false 75 Rules CorrectAnswersCount_CanBeZeroOrBigger 0, 1 true 76 Rules GivenAnswersCount_ShouldNotBeSmallerThanZero -1 false 77 Rules GivenAnswersCount_CanBeZeroOrBigger 0, 1 true 78 Rules AverageTimePerQuestion_ShouldNotBeSmallerThanZero -1 false 79 Rules AverageTimePerQuestion_CanBeZeroOrBigger 0, 0.1, 1 true 80 Rules QuickestAnswer_ShouldNotBeSmallerThanZero -1 false 81 Rules QuickestAnswer_CanBeZeroOrBigger 0, 0.1, 1 true 82 Rules SlowestAnswer_ShouldNotBeSmallerThanZero -1 false 83 Rules SlowestAnswer_CanBeZeroOrBigger 0, 0.1, 1 true Registermodel Validator # Tested method Objective Input Expected Result 84 Rules Email_CannotBeEmpty Empty email false 85 Rules Email_CannotBeInvalid invalid emails false 86 Rules Email_IsValid valid email true 87 Rules Username_CannotBeEmpty empty username false 88 Rules Username_IsValid non-empty username true 89 Rules Password_CannotBeEmpty empty password false 90 Rules Password_MustHaveOneLowercase password without lowercase false 91 Rules Password_MustHaveOneUppercase password without uppercase false 92 Rules Password_MustHaveOneDigit password without digit false 93 Rules Password_MustHaveOneSpecialChar password without special char false 94 Rules Password_MustBeAtLeastSixCharsLong password shorter than 6 chars false 95 Rules Password_ShouldBeValid valid passwords true Game Session Validator # Tested method Objective Input Expected Result 96 Rules Level_ShouldNotBeSmallerThanZero -1 false 97 Rules Level_CanBeZeroOrBigger 0, 1 true 98 Rules CurrentStreak_ShouldNotBeSmallerThanZero -1 false 99 Rules CurrentStreak_CanBeZeroOrBigger 0, 1 true 100 Rules OverallAnswered_ShouldNotBeSmallerThanZero -1 false 101 Rules OverallAnswered_CanBeZeroOrBigger 0, 1 true 102 Rules CorrectAnswers_ShouldNotBeSmallerThanZero -1 false 103 Rules CorrectAnswers_CanBeZeroOrBigger 0, 1 true 104 Rules TotalTimePlayed_ShouldNotBeSmallerThanZero -1 false 105 Rules TotalTimePlayed_CanBeZeroOrBigger 0, 0.1, 1 true 106 Rules QuickestAnswer_ShouldNotBeSmallerThanZero -1 false 107 Rules QuickestAnswer_CanBeZeroOrBigger 0, 0.1, 1 true 108 Rules SlowestAnswer_ShouldNotBeSmallerThanZero -1 false 109 Rules SlowestAnswer_CanBeZeroOrBigger 0, 0.1, 1 true 110 Rules LongestStreak_ShouldNotBeSmallerThanZero -1 false 111 Rules LongestStreak_CanBeZeroOrBigger 0, 1 true 112 Rules LongestStreak_CannotBeSmallerThanCurrentStreak currentstreak=1, longeststreak=0 false","title":"Testplan AMOGUS"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#testplan-amogus","text":"","title":"Testplan AMOGUS"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#test-types","text":"Unit tests Beta tests","title":"Test types"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#target-test-coverage","text":"The target test coverage is 60% in terms of unit testing line and branch coverage. Goal is to test the services functionalities.","title":"Target test coverage"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#testing-tools","text":"","title":"Testing tools"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#unit-testing","text":"xUnit : Unit test framework Moq : Mock framework to mock services","title":"Unit testing"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#beta-tests","text":"Humans : Some random dudes who will test the application e. g. Luca Hackl Test server","title":"Beta tests"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#test-case-management","text":"Github Actions will show the amount of tests passed and failed per pull request.","title":"Test case management"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#test-cases","text":"","title":"Test cases"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#unit-test-cases","text":"","title":"Unit test cases"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#auth-service","text":"# Tested method Objective Input Expected Result 1 CreateRolesAsync CreateRolesAsync_WhenGivenRoles_CreatesThem UserRoles class All Roles correctly created in the RoleManager 2 CreateRolesAsync CreateRolesAsync_WhenGivenRoles_AndRoleAlreadyExists_DoesNotCreateIt UserRoles class No roles created in the RoleManager 3 LoginUserAsync LoginUserAsync_WhenGivenUserData_AndEmailWrong_Exception Wrong email Faulted result 4 LoginUserAsync LoginUserAsync_WhenGivenUserData_AndPasswordWrong_Exception Wrong password Faulted result 5 LoginUserAsync LoginUserAsync_WhenGivenUserData_AndAllCorrect_LoginUser Correct user data Successful result and Auth Token 6 RegisterUserAsync RegisterUserAsync_WhenValidationFails_Exception user data with failed validation Faulted result 7 RegisterUserAsync RegisterUserAsync_WhenGivenRegisterModel_AndUserAlreadyExists_Exception user data that already exists Faulted result 8 RegisterUserAsync RegisterUserAsync_WhenGivenRegisterModel_AndFailedToCreate_Exception valid data but cant create user Faulted result 9 RegisterUserAsync RegisterUserAsync_WhenGivenRegisterModel_AndRoleDoesNotExist_Exception valid user data but non existent role Faulted result 10 RegisterUserAsync RegisterUserAsync_WhenGivenRegisterModel_AndEverythingIsFine_LoginUser valid user data and valid role Successful result and Auth Token","title":"Auth Service"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#exerciseservice","text":"# Tested method Objective Input Expected Result 11 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsNotRandomMental_ AndOrigQuestionNotFound_ReturnsFalse Non random question, that does not exist false 12 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsRandomMental_ AndAnswerIsNotCalculable_ReturnsFalse random question that cannot be calculated false 13 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsNotRandomMental_ AndQuestionExists_ReturnAnswerIsCorrect non random question with correct answer true 14 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsNotRandomMental_ AndQuestionExists_ReturnAnswerIsNotCorrect non random question with incorrect answer false 15 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsRandomMental_ ReturnAnswerIsCorrect random question with correct answer true 16 CheckAnswer CheckAnswer_WhenGivenAnswer_AndQuestionIsRandomMental_ ReturnAnswerIsNotCorrect random question with incorrect answer false","title":"ExerciseService"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#gameservice","text":"# Tested method Objective Input Expected Result 17 NewSession NewSession_WithoutQuestionAmount_ReturnsSessionWith10Questions no amount specified Session with 10 questions 18 NewSession NewSession_WithQuestionAmount1_ReturnsSessionWith1Question amount should be 10 Session with 10 questions 19 EndSessionAsync EndSessionAsync_AndUserNotFound_ReturnsException Wrong userId Faulted result 20 EndSessionAsync EndSessionAsync_AndUserFound_AndValidationFails_ReturnsException non valid session model Faulted result 21 EndSessionAsync EndSessionAsync_AndUserFound_AndSessionValid_ButDbNotAffected_ReturnsFaulted Session cannot be saved Faulted result 22 EndSessionAsync EndSessionAsync_AndUserFound_AndSessionValid_AndDbAffected_ReturnsSuccess session can be saves Successful result","title":"GameService"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#userservice","text":"# Tested method Objective Input Expected Result 23 GetUserAsync GetUserAsync_WhenGivenAUserId_AndNoUserWithThatIdExists_Exception wrong userId Faulted result 24 GetUserAsync GetUserAsync_WhenGivenAUserId_AndUserWithThatIdExists_ReturnsUser valid userid Successful result and user 25 IsInRoleAsync IsInRoleAsync_WhenGivenAUserId_AndRole_AndUserNotInRole_ReturnsFalse userId not in role false 26 IsInRoleAsync IsInRoleAsync_WhenGivenAUserId_AndRole_AndUserInRole_ReturnsTrue userId in role true 27 DeleteUserAsync DeleteUserAsync_WhenGivenAUserId_AndUserNotFound_ReturnsFaulted wrong userId Faulted result 28 DeleteUserAsync DeleteUserAsync_WhenGivenAUserId_AndUserManagerCantDelete_Exception valid userId but userManager cannot delete Faulted result 29 DeleteUserAsync DeleteUserAsync_WhenGivenAUserId_AndEverythingIsFine_ReturnTrue valid userId Successful result and user is deleted","title":"UserService"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#teacherservice","text":"# Tested method Objective Input Expected Result 30 AddQuestionAsync AddQuestionAsync_WhenGivenQuestion_AndEverythingIsFine_AddsQuestionAndReturnsQuestion valid Question Successful result and Question 31 AddQuestionAsync AddQuestionAsync_WhenGivenQuestion_AndIOException_ReturnsException empty Question faulted result 32 DeleteQuestionByIdAsync DeleteQuestionByIdAsync_WhenGivenQuestionId_AndQuestionDoesNotExist_ReturnsException invalid QuestionID faulted result 33 DeleteQuestionByIdAsync DeleteQuestionByIdAsync_WhenGivenQuestionId_AndQuestionFileNotAccessible_ReturnsException valid QuestionID but not accessible faulted result 34 DeleteQuestionByIdAsync DeleteQuestionByIdAsync_WhenGivenQuestionId_AndEverythingIsFine_ReturnsTrue_AndQuestionDeleted valid QuestionID Successful result and question deleted 35 GetQuestionById GetQuestionById_WhenGivenQuestionId_AndQuestionDoesNotExist_ReturnsException invalid QuestionID Faulted result 36 GetQuestionById GetQuestionById_WhenGivenQuestionId_AndQuestionDoesExist_ReturnsQuestion valid QuestionID Successful result and question","title":"TeacherService"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#streaksservice","text":"# Tested method Objective Input Expected Result 37 ReadStreakAsync ReadStreakAsync_WhenGivenAUserId_AndUserHasNoStats_Exception UserID with no stats Faulted result 38 ReadStreakAsync ReadStreakAsync_WhenGivenAUserId_AndUserHasStats_ReturnsCurrentStreak valid userid with stats Successful result and current streak 39 UpdateAllStreaksAsync UpdateAllStreaksAsync_WhenPlayerHasNotPlayedToday_AndNotLongestStreak_StreakIsSetTo0 player that hasn't played today streak set to 0 40 UpdateAllStreaksAsync UpdateAllStreaksAsync_WhenPlayerHasNotPlayedToday_AndLongestStreak_StreakIsSetTo0_ButKeepLongest player that hasn't played today streak set to 0 and longest streak kept 41 UpdateAllStreaksAsync UpdateAllStreaksAsync_WhenPlayerHasPlayedToday_ButNotLongestStreak_StreakIsNotLost player that has played today streak is kept 42 UpdateAllStreaksAsync UpdateAllStreaksAsync_StreaksOfAllPlayersAreUpdated multiple players that have not played today all streaks set to 0","title":"StreaksService"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#statsservice","text":"# Tested method Objective Input Expected Result 43 GetUserStatsAsync GetUserStatsAsync_WhenGivenAUserId_AndUserHasNoStats_Exception userid that has no stats Faulted result 44 GetUserStatsAsync GetUserStatsAsync_WhenGivenAUserId_AndUserHasStats_ReturnsStats userId that has stats Successful result and stats 45 GetDetailedUserStatsModelAsync GetDetailedUserStatsModelAsync_WhenGivenAUserId_AndUserHasNoStats_Exception userid that has no stats Faulted result 46 GetDetailedUserStatsModelAsync GetDetailedUserStatsModelAsync_WhenGivenAUserId_EverythingAlright_ReturnsDetailedUserstats userId that has stats Successful result and detailed UserStatsApiModel 47 UpdateUserStatsAsync(UserStats userStats) UpdateUserStatsAsync_WhenGivenUserStats_AndValidationFails_ReturnsFalse invalid UserStats false 48 UpdateUserStatsAsync(UserStats userStats) UpdateUserStatsAsync_WhenGivenUserStats_UpdateInDbFails_ReturnsFalse valid UserStats but repository failed updating false 49 UpdateUserStatsAsync(UserStats userStats) UpdateUserStatsAsync_WhenGivenUserStats_AndEverythingIsFine_ReturnsTrue valid UserStats true 50 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndValidationFails_ReturnsFalse invalid GameSession, Answers and user false 51 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_UpdateInDbFails_ReturnsFalse valid GameSession, Answers and user but update in db fails false 52 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndEverythingIsFine_ReturnsTrue valid GameSession, Answers and user true 53 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndEverythingIsFine_StatsAreUpdatedCorrectly valid GameSession, Answers and user true and stats updated correctly 54 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndEverythingIsFine_StatsAreUpdatedCorrectly2 valid GameSession, Answers and user (other values than above so other changes happen) true and stats updated correctly 55 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndUserHasNotPlayedYet_StreakIsUpdated like the above but playedtoday is false played today is now true and streak is updated 56 UpdateUserStatsAsync(GameSession session, bool[] answers, ApplicationUser user) UpdateUserStatsAsync_WhenGivenGameSessionAnswersAndUser_AndUserHasPlayedAlready_StreakIsNotIncreased like the above but playedtoday is true streak is not increased","title":"StatsService"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#leaderboardservice","text":"# Tested method Objective Input Expected Result 57 GetLeaderboardAsync GetLeaderboardAsync_ReturnsCorrectObject UserStats mock Correct Object hirachy","title":"LeaderboardService"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#mentalexercisefactory","text":"# Tested method Objective Input Expected Result 58 Median Median_Returns0_ForEmptyArray Empty Array 0 59 Median Median_ReturnsFirstElement_ForArrayWithSize1 Array with 1 Element The first element 60 Median Median_ReturnsAverage_ForArrayWithSize2 Array with 2 Elements Average 61 Median Median_ReturnsMedian_ForSortedArrayWithEvenCount Sorted Array with even Elements Correct median 62 Median Median_ReturnsMedian_ForSortedArrayWithOddCount Sorted Array with Odd Elements Correct median 63 Median Median_ReturnsMedian_ForRandomArrayWithEvenCount Shuffled Array with even Elements Correct median 64 Median Median_ReturnsMedian_ForRandomArrayWithOddCount Shuffled Array with Odd Elements Correct median 65 CalcAnswer CalcAnswer_ReturnsEmpty_WithEmptyQuestion Empty Question Empty String 66 CalcAnswer CalcAnswer_SolvesEquation_WithXInQuestion Equation with x set of solutions 67 CalcAnswer CalcAnswer_SolvesExpression_WithQuestion Expressions without x Correct answer for the expressions 68 CalcAnswer CalcAnswer_ReturnsEmpty_ForXInStatement Expressions with x empty string","title":"MentalExerciseFactory"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#game-session-validator","text":"# Tested method Objective Input Expected Result 69 Rules SessionId_CannotBeEmpty Empty sessionid false 70 Rules SessionId_ShouldBeValidGuid invalid guid false 71 Rules SessionId_ShouldBeValid valid guid true 72 Rules Playtime_ShouldNotBeSmallerThanZero -1 false 73 Rules Playtime_CanBeZeroOrBigger 0, 0.1, 1 true 74 Rules CorrectAnswersCount_ShouldNotBeSmallerThanZero -1 false 75 Rules CorrectAnswersCount_CanBeZeroOrBigger 0, 1 true 76 Rules GivenAnswersCount_ShouldNotBeSmallerThanZero -1 false 77 Rules GivenAnswersCount_CanBeZeroOrBigger 0, 1 true 78 Rules AverageTimePerQuestion_ShouldNotBeSmallerThanZero -1 false 79 Rules AverageTimePerQuestion_CanBeZeroOrBigger 0, 0.1, 1 true 80 Rules QuickestAnswer_ShouldNotBeSmallerThanZero -1 false 81 Rules QuickestAnswer_CanBeZeroOrBigger 0, 0.1, 1 true 82 Rules SlowestAnswer_ShouldNotBeSmallerThanZero -1 false 83 Rules SlowestAnswer_CanBeZeroOrBigger 0, 0.1, 1 true","title":"Game Session Validator"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#registermodel-validator","text":"# Tested method Objective Input Expected Result 84 Rules Email_CannotBeEmpty Empty email false 85 Rules Email_CannotBeInvalid invalid emails false 86 Rules Email_IsValid valid email true 87 Rules Username_CannotBeEmpty empty username false 88 Rules Username_IsValid non-empty username true 89 Rules Password_CannotBeEmpty empty password false 90 Rules Password_MustHaveOneLowercase password without lowercase false 91 Rules Password_MustHaveOneUppercase password without uppercase false 92 Rules Password_MustHaveOneDigit password without digit false 93 Rules Password_MustHaveOneSpecialChar password without special char false 94 Rules Password_MustBeAtLeastSixCharsLong password shorter than 6 chars false 95 Rules Password_ShouldBeValid valid passwords true","title":"Registermodel Validator"},{"location":"Developer%20Docs/4.%20Testing/Testplan/#game-session-validator_1","text":"# Tested method Objective Input Expected Result 96 Rules Level_ShouldNotBeSmallerThanZero -1 false 97 Rules Level_CanBeZeroOrBigger 0, 1 true 98 Rules CurrentStreak_ShouldNotBeSmallerThanZero -1 false 99 Rules CurrentStreak_CanBeZeroOrBigger 0, 1 true 100 Rules OverallAnswered_ShouldNotBeSmallerThanZero -1 false 101 Rules OverallAnswered_CanBeZeroOrBigger 0, 1 true 102 Rules CorrectAnswers_ShouldNotBeSmallerThanZero -1 false 103 Rules CorrectAnswers_CanBeZeroOrBigger 0, 1 true 104 Rules TotalTimePlayed_ShouldNotBeSmallerThanZero -1 false 105 Rules TotalTimePlayed_CanBeZeroOrBigger 0, 0.1, 1 true 106 Rules QuickestAnswer_ShouldNotBeSmallerThanZero -1 false 107 Rules QuickestAnswer_CanBeZeroOrBigger 0, 0.1, 1 true 108 Rules SlowestAnswer_ShouldNotBeSmallerThanZero -1 false 109 Rules SlowestAnswer_CanBeZeroOrBigger 0, 0.1, 1 true 110 Rules LongestStreak_ShouldNotBeSmallerThanZero -1 false 111 Rules LongestStreak_CanBeZeroOrBigger 0, 1 true 112 Rules LongestStreak_CannotBeSmallerThanCurrentStreak currentstreak=1, longeststreak=0 false","title":"Game Session Validator"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/","text":"Test Report Introduction This document gives an overview of the testing activities of the AMOGUS project. It will be extended in further development and testing. Test Strategy We will perform Unit tests in our C# Backend for all major Service implementations and Validators. These Unit tests will be executed on every push to our repo by our Github Actions CI workflows. Furthermore there will be Validation testing, where we will give a demo to some people to test the general gameplay and provide us some form of \"manual e2e tests\" For more information look at our testplan . Test plan For more information look at our testplan . Test cases To see all unit test cases, look at our testplan . Test Results In the process of writing our unit tests, 3 bugs where found (and 2 minor improvements). UserService - DeleteUserAsync() Severity: High Test: DeleteUserAsync_WhenGivenAUserId_AndEverythingIsFine_ReturnTrue() Reason for Error: Missing \u201c!\u201d in first if-statement. Method returns exception when everything is alright. if ( await DeleteUserHistoryAsync ( userId )) { return new UserOperationException ( \"Failed deleting user.\" ); } Solution: Added missing \u201c!\u201d MentalExerciseFactory - CalcAnswer() Severity: Low Test: CheckAnswer_WhenGivenAnswer_AndQuestionIsRandomMental_AndAnswerIsNotCalculable_ReturnsFalse() Reason for Error: testAnswer contained \u2018x' in Exercise attribute which was set to \u201ctest exercise\u201d which lead the CalcAnswer Method to try and solve it with the AngouriMath library. Since \u201ctest exercise\u201d isn\u2019t solvable it threw the SolveRequiresStatementException. This exception is not handled. public string CalcAnswer ( string question ) { if ( question is null ) return string . Empty ; Entity expr = question ; try { if ( question . Contains ( 'x' )) { var set = expr . Solve ( \"x\" ); if ( set is Entity . Set . FiniteSet finiteset ) expr = finiteset . First (); expr = set ; } return expr . Simplify (). ToString (); } catch ( CannotEvalException ) { return string . Empty ; } } Solution: Added second catch clause catch ( SolveRequiresStatementException ) { return string . Empty ; } MentalExerciseFactory - Median() Severity: Low Test: Median_ReturnsMedian_ForSortedArrayWithEvenCount() Reason for Error: Median implementation was wrong private static double Median ( int [] arr ) { Array . Sort ( arr ); double mid = arr . Length / 2d ; if ( mid == ( int ) mid ) return arr [( int ) mid ]; return ( arr [( int ) mid ] + arr [ Math . Min (( int ) mid + 1 , arr . Length - 1 )]) / 2d ; } Median should return the midpoint if the length is not divisible by 2. So the condition has to be negated. Solution: Fixed the median implementation internal static double Median ( int [] arr ) { Array . Sort ( sortedArr ); int mid = sortedArr . Length / 2 ; if ( sortedArr . Length % 2 != 0 ) return sortedArr [ mid ]; return ( sortedArr [ mid ] + sortedArr [ Math . Max ( Math . Min ( mid - 1 , sortedArr . Length - 1 ), 0 )]) / 2d ; } Improvement: return early from Median calculation Severity: None Median of an empty array or with a single element should return earlier Solution: Added early returns internal static double Median ( int [] arr ) { if ( arr . Length == 0 ) return 0 ; if ( arr . Length == 1 ) return arr [ 0 ]; Array . Sort ( sortedArr ); int mid = sortedArr . Length / 2 ; if ( sortedArr . Length % 2 != 0 ) return sortedArr [ mid ]; return ( sortedArr [ mid ] + sortedArr [ Math . Max ( Math . Min ( mid - 1 , sortedArr . Length - 1 ), 0 )]) / 2d ; } Improvement: Do not mutate the input array in Median calculation Severity: Low Solution: clone array before sorting internal static double Median ( int [] arr ) { if ( arr . Length == 0 ) return 0 ; if ( arr . Length == 1 ) return arr [ 0 ]; int [] sortedArr = ( int []) arr . Clone (); Array . Sort ( sortedArr ); int mid = sortedArr . Length / 2 ; if ( sortedArr . Length % 2 != 0 ) return sortedArr [ mid ]; return ( sortedArr [ mid ] + sortedArr [ Math . Max ( Math . Min ( mid - 1 , sortedArr . Length - 1 ), 0 )]) / 2d ; } These are the overall test results: Metrics As mentioned above, 3 bugs where found (and 2 minor improvements). Time to fix all the issues: 30m Achieved code coverage: Recommendations Unit testing with xUnit.Net and Moq is easy to do and get up and running. Future projects should use a better solution to display the code coverage. For example Codecov to display coverage in pull requests (for reference see this ). Furthermore a better solution to collect and document test cases (other than manual) should be practiced! Conclusion To summarize, very few issues were detected. The found errors could be resolved very quickly and the overall software quality is very good!","title":"Test Report"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#test-report","text":"","title":"Test Report"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#introduction","text":"This document gives an overview of the testing activities of the AMOGUS project. It will be extended in further development and testing.","title":"Introduction"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#test-strategy","text":"We will perform Unit tests in our C# Backend for all major Service implementations and Validators. These Unit tests will be executed on every push to our repo by our Github Actions CI workflows. Furthermore there will be Validation testing, where we will give a demo to some people to test the general gameplay and provide us some form of \"manual e2e tests\" For more information look at our testplan .","title":"Test Strategy"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#test-plan","text":"For more information look at our testplan .","title":"Test plan"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#test-cases","text":"To see all unit test cases, look at our testplan .","title":"Test cases"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#test-results","text":"In the process of writing our unit tests, 3 bugs where found (and 2 minor improvements). UserService - DeleteUserAsync() Severity: High Test: DeleteUserAsync_WhenGivenAUserId_AndEverythingIsFine_ReturnTrue() Reason for Error: Missing \u201c!\u201d in first if-statement. Method returns exception when everything is alright. if ( await DeleteUserHistoryAsync ( userId )) { return new UserOperationException ( \"Failed deleting user.\" ); } Solution: Added missing \u201c!\u201d MentalExerciseFactory - CalcAnswer() Severity: Low Test: CheckAnswer_WhenGivenAnswer_AndQuestionIsRandomMental_AndAnswerIsNotCalculable_ReturnsFalse() Reason for Error: testAnswer contained \u2018x' in Exercise attribute which was set to \u201ctest exercise\u201d which lead the CalcAnswer Method to try and solve it with the AngouriMath library. Since \u201ctest exercise\u201d isn\u2019t solvable it threw the SolveRequiresStatementException. This exception is not handled. public string CalcAnswer ( string question ) { if ( question is null ) return string . Empty ; Entity expr = question ; try { if ( question . Contains ( 'x' )) { var set = expr . Solve ( \"x\" ); if ( set is Entity . Set . FiniteSet finiteset ) expr = finiteset . First (); expr = set ; } return expr . Simplify (). ToString (); } catch ( CannotEvalException ) { return string . Empty ; } } Solution: Added second catch clause catch ( SolveRequiresStatementException ) { return string . Empty ; } MentalExerciseFactory - Median() Severity: Low Test: Median_ReturnsMedian_ForSortedArrayWithEvenCount() Reason for Error: Median implementation was wrong private static double Median ( int [] arr ) { Array . Sort ( arr ); double mid = arr . Length / 2d ; if ( mid == ( int ) mid ) return arr [( int ) mid ]; return ( arr [( int ) mid ] + arr [ Math . Min (( int ) mid + 1 , arr . Length - 1 )]) / 2d ; } Median should return the midpoint if the length is not divisible by 2. So the condition has to be negated. Solution: Fixed the median implementation internal static double Median ( int [] arr ) { Array . Sort ( sortedArr ); int mid = sortedArr . Length / 2 ; if ( sortedArr . Length % 2 != 0 ) return sortedArr [ mid ]; return ( sortedArr [ mid ] + sortedArr [ Math . Max ( Math . Min ( mid - 1 , sortedArr . Length - 1 ), 0 )]) / 2d ; } Improvement: return early from Median calculation Severity: None Median of an empty array or with a single element should return earlier Solution: Added early returns internal static double Median ( int [] arr ) { if ( arr . Length == 0 ) return 0 ; if ( arr . Length == 1 ) return arr [ 0 ]; Array . Sort ( sortedArr ); int mid = sortedArr . Length / 2 ; if ( sortedArr . Length % 2 != 0 ) return sortedArr [ mid ]; return ( sortedArr [ mid ] + sortedArr [ Math . Max ( Math . Min ( mid - 1 , sortedArr . Length - 1 ), 0 )]) / 2d ; } Improvement: Do not mutate the input array in Median calculation Severity: Low Solution: clone array before sorting internal static double Median ( int [] arr ) { if ( arr . Length == 0 ) return 0 ; if ( arr . Length == 1 ) return arr [ 0 ]; int [] sortedArr = ( int []) arr . Clone (); Array . Sort ( sortedArr ); int mid = sortedArr . Length / 2 ; if ( sortedArr . Length % 2 != 0 ) return sortedArr [ mid ]; return ( sortedArr [ mid ] + sortedArr [ Math . Max ( Math . Min ( mid - 1 , sortedArr . Length - 1 ), 0 )]) / 2d ; } These are the overall test results:","title":"Test Results"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#metrics","text":"As mentioned above, 3 bugs where found (and 2 minor improvements). Time to fix all the issues: 30m Achieved code coverage:","title":"Metrics"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#recommendations","text":"Unit testing with xUnit.Net and Moq is easy to do and get up and running. Future projects should use a better solution to display the code coverage. For example Codecov to display coverage in pull requests (for reference see this ). Furthermore a better solution to collect and document test cases (other than manual) should be practiced!","title":"Recommendations"},{"location":"Developer%20Docs/4.%20Testing/zTest%20Report/#conclusion","text":"To summarize, very few issues were detected. The found errors could be resolved very quickly and the overall software quality is very good!","title":"Conclusion"},{"location":"Developer%20Docs/5.%20Metrics/Benchmarks/","text":"Benchmark Tests Benchmarks were conducted on a Lenovo ThinkPad T450s - Results on the actual server environment might be better! Therefore, an important factor to look at, is the scaling between different Amount -parameters and the delta between each method! (These results should be somehow 'stable' across devices) ExerciseService These Benchmarks were collected from the ExerciseService.CheckAnswer() Method, where in the setup (not included in the benchmark time) Amount -many questions get pulled from the Questions-catalogue or randomly generated by the Factory. // * Summary * BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19045.2965/22H2/2022Update) Intel Core i7-5600U CPU 2.60GHz (Broadwell), 1 CPU, 4 logical and 2 physical cores .NET SDK=7.0.201 [Host] : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 DefaultJob : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 | Method | Amount | Mean | Error | StdDev | Allocated | |------------------------------------------- |------- |------------------:|---------------:|---------------:|----------:| | CheckAnswer_For_Mental_Correct | 1 | 376.0694 ns | 2.8835 ns | 2.6972 ns | 88 B | | CheckAnswer_For_Analysis_Correct | 1 | 46.7278 ns | 0.3879 ns | 0.3240 ns | 88 B | | CheckAnswer_For_Geometry_Correct | 1 | 204.2387 ns | 1.1517 ns | 1.0773 ns | 88 B | | CheckAnswer_For_RandomMental_Correct | 1 | 17,243.4191 ns | 148.2749 ns | 138.6965 ns | 7863 B | | CheckAnswer_For_RandomMentalInsane_Correct | 1 | 191,751.7404 ns | 1,661.9532 ns | 1,473.2783 ns | 122548 B | | CheckAnswer_For_Mental_Wrong | 1 | 393.4626 ns | 2.6921 ns | 2.3864 ns | 88 B | | CheckAnswer_For_Analysis_Wrong | 1 | 81.1610 ns | 1.1441 ns | 1.0702 ns | 88 B | | CheckAnswer_For_Geometry_Wrong | 1 | 253.0405 ns | 3.7406 ns | 3.3160 ns | 88 B | | CheckAnswer_For_RandomMental_Wrong | 1 | 16,222.5817 ns | 131.2528 ns | 122.7740 ns | 7863 B | | CheckAnswer_For_RandomMentalInsane_Wrong | 1 | 192,425.2668 ns | 2,522.1894 ns | 2,235.8552 ns | 122395 B | | CheckAnswer_For_Mental_Correct | 10 | 3,943.0722 ns | 25.7309 ns | 24.0687 ns | 880 B | | CheckAnswer_For_Analysis_Correct | 10 | 720.9757 ns | 5.0698 ns | 4.2335 ns | 880 B | | CheckAnswer_For_Geometry_Correct | 10 | 2,568.8426 ns | 16.2514 ns | 14.4064 ns | 880 B | | CheckAnswer_For_RandomMental_Correct | 10 | 351,417.5255 ns | 5,453.3028 ns | 4,553.7548 ns | 193421 B | | CheckAnswer_For_RandomMentalInsane_Correct | 10 | 350,652.7138 ns | 3,072.0548 ns | 3,414.5808 ns | 195013 B | | CheckAnswer_For_Mental_Wrong | 10 | 4,220.4692 ns | 44.7595 ns | 37.3762 ns | 880 B | | CheckAnswer_For_Analysis_Wrong | 10 | 804.2267 ns | 9.8240 ns | 9.1894 ns | 880 B | | CheckAnswer_For_Geometry_Wrong | 10 | 2,732.1326 ns | 6.7042 ns | 5.5983 ns | 880 B | | CheckAnswer_For_RandomMental_Wrong | 10 | 170,571.0955 ns | 1,039.2961 ns | 921.3089 ns | 79381 B | | CheckAnswer_For_RandomMentalInsane_Wrong | 10 | 694,795.1562 ns | 8,611.6278 ns | 8,055.3220 ns | 425114 B | | CheckAnswer_For_RandomMental_Correct | 100 | 2,095,574.8197 ns | 19,278.3336 ns | 16,098.2816 ns | 1018883 B | | CheckAnswer_For_RandomMentalInsane_Correct | 100 | 5,133,289.5833 ns | 27,084.9770 ns | 25,335.3043 ns | 2987918 B | | CheckAnswer_For_RandomMental_Wrong | 100 | 2,613,226.7448 ns | 38,666.1526 ns | 36,168.3431 ns | 1354488 B | | CheckAnswer_For_RandomMentalInsane_Wrong | 100 | 5,784,581.7007 ns | 79,705.1139 ns | 66,557.3799 ns | 3437303 B | // * Legends * Amount : Value of the 'Amount' parameter Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 ns : 1 Nanosecond (0.000000001 sec) // ***** BenchmarkRunner: End ***** Run time: 00:10:52 (652.45 sec), executed benchmarks: 30 Global total time: 00:11:18 (678.57 sec), executed benchmarks: 30 // * Artifacts cleanup * Mental Exercise Factory These Benchmark were collected from the MentalExerciseFactory.GenerateRandomQuestion() Method, where Amount -many questions get generated. // * Summary * BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19045.2965/22H2/2022Update) Intel Core i7-5600U CPU 2.60GHz (Broadwell), 1 CPU, 4 logical and 2 physical cores .NET SDK=7.0.201 [Host] : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 DefaultJob : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 | Method | Amount | Mean | Error | StdDev | Allocated | |------------------------------- |------- |-------------:|-----------:|-----------:|------------:| | GenerateRandomExercises | 1 | 33.28 us | 0.357 us | 0.298 us | 11.02 KB | | GenerateRandomExercises_Insane | 1 | 46.10 us | 0.340 us | 0.284 us | 14.83 KB | | GenerateRandomExercises | 10 | 314.87 us | 5.853 us | 5.475 us | 110.27 KB | | GenerateRandomExercises_Insane | 10 | 543.27 us | 7.763 us | 6.882 us | 149.27 KB | | GenerateRandomExercises | 100 | 3,222.10 us | 42.776 us | 35.720 us | 1103.91 KB | | GenerateRandomExercises_Insane | 100 | 4,714.66 us | 69.032 us | 64.573 us | 1480.3 KB | | GenerateRandomExercises | 1000 | 32,455.74 us | 644.823 us | 716.719 us | 11025.3 KB | | GenerateRandomExercises_Insane | 1000 | 45,743.09 us | 728.414 us | 645.720 us | 14839.44 KB | // * Legends * Amount : Value of the 'Amount' parameter Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 us : 1 Microsecond (0.000001 sec) // ***** BenchmarkRunner: End ***** Run time: 00:02:31 (151.58 sec), executed benchmarks: 8 Global total time: 00:02:57 (177.41 sec), executed benchmarks: 8 // * Artifacts cleanup *","title":"Benchmark Tests"},{"location":"Developer%20Docs/5.%20Metrics/Benchmarks/#benchmark-tests","text":"Benchmarks were conducted on a Lenovo ThinkPad T450s - Results on the actual server environment might be better! Therefore, an important factor to look at, is the scaling between different Amount -parameters and the delta between each method! (These results should be somehow 'stable' across devices)","title":"Benchmark Tests"},{"location":"Developer%20Docs/5.%20Metrics/Benchmarks/#exerciseservice","text":"These Benchmarks were collected from the ExerciseService.CheckAnswer() Method, where in the setup (not included in the benchmark time) Amount -many questions get pulled from the Questions-catalogue or randomly generated by the Factory. // * Summary * BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19045.2965/22H2/2022Update) Intel Core i7-5600U CPU 2.60GHz (Broadwell), 1 CPU, 4 logical and 2 physical cores .NET SDK=7.0.201 [Host] : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 DefaultJob : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 | Method | Amount | Mean | Error | StdDev | Allocated | |------------------------------------------- |------- |------------------:|---------------:|---------------:|----------:| | CheckAnswer_For_Mental_Correct | 1 | 376.0694 ns | 2.8835 ns | 2.6972 ns | 88 B | | CheckAnswer_For_Analysis_Correct | 1 | 46.7278 ns | 0.3879 ns | 0.3240 ns | 88 B | | CheckAnswer_For_Geometry_Correct | 1 | 204.2387 ns | 1.1517 ns | 1.0773 ns | 88 B | | CheckAnswer_For_RandomMental_Correct | 1 | 17,243.4191 ns | 148.2749 ns | 138.6965 ns | 7863 B | | CheckAnswer_For_RandomMentalInsane_Correct | 1 | 191,751.7404 ns | 1,661.9532 ns | 1,473.2783 ns | 122548 B | | CheckAnswer_For_Mental_Wrong | 1 | 393.4626 ns | 2.6921 ns | 2.3864 ns | 88 B | | CheckAnswer_For_Analysis_Wrong | 1 | 81.1610 ns | 1.1441 ns | 1.0702 ns | 88 B | | CheckAnswer_For_Geometry_Wrong | 1 | 253.0405 ns | 3.7406 ns | 3.3160 ns | 88 B | | CheckAnswer_For_RandomMental_Wrong | 1 | 16,222.5817 ns | 131.2528 ns | 122.7740 ns | 7863 B | | CheckAnswer_For_RandomMentalInsane_Wrong | 1 | 192,425.2668 ns | 2,522.1894 ns | 2,235.8552 ns | 122395 B | | CheckAnswer_For_Mental_Correct | 10 | 3,943.0722 ns | 25.7309 ns | 24.0687 ns | 880 B | | CheckAnswer_For_Analysis_Correct | 10 | 720.9757 ns | 5.0698 ns | 4.2335 ns | 880 B | | CheckAnswer_For_Geometry_Correct | 10 | 2,568.8426 ns | 16.2514 ns | 14.4064 ns | 880 B | | CheckAnswer_For_RandomMental_Correct | 10 | 351,417.5255 ns | 5,453.3028 ns | 4,553.7548 ns | 193421 B | | CheckAnswer_For_RandomMentalInsane_Correct | 10 | 350,652.7138 ns | 3,072.0548 ns | 3,414.5808 ns | 195013 B | | CheckAnswer_For_Mental_Wrong | 10 | 4,220.4692 ns | 44.7595 ns | 37.3762 ns | 880 B | | CheckAnswer_For_Analysis_Wrong | 10 | 804.2267 ns | 9.8240 ns | 9.1894 ns | 880 B | | CheckAnswer_For_Geometry_Wrong | 10 | 2,732.1326 ns | 6.7042 ns | 5.5983 ns | 880 B | | CheckAnswer_For_RandomMental_Wrong | 10 | 170,571.0955 ns | 1,039.2961 ns | 921.3089 ns | 79381 B | | CheckAnswer_For_RandomMentalInsane_Wrong | 10 | 694,795.1562 ns | 8,611.6278 ns | 8,055.3220 ns | 425114 B | | CheckAnswer_For_RandomMental_Correct | 100 | 2,095,574.8197 ns | 19,278.3336 ns | 16,098.2816 ns | 1018883 B | | CheckAnswer_For_RandomMentalInsane_Correct | 100 | 5,133,289.5833 ns | 27,084.9770 ns | 25,335.3043 ns | 2987918 B | | CheckAnswer_For_RandomMental_Wrong | 100 | 2,613,226.7448 ns | 38,666.1526 ns | 36,168.3431 ns | 1354488 B | | CheckAnswer_For_RandomMentalInsane_Wrong | 100 | 5,784,581.7007 ns | 79,705.1139 ns | 66,557.3799 ns | 3437303 B | // * Legends * Amount : Value of the 'Amount' parameter Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 ns : 1 Nanosecond (0.000000001 sec) // ***** BenchmarkRunner: End ***** Run time: 00:10:52 (652.45 sec), executed benchmarks: 30 Global total time: 00:11:18 (678.57 sec), executed benchmarks: 30 // * Artifacts cleanup *","title":"ExerciseService"},{"location":"Developer%20Docs/5.%20Metrics/Benchmarks/#mental-exercise-factory","text":"These Benchmark were collected from the MentalExerciseFactory.GenerateRandomQuestion() Method, where Amount -many questions get generated. // * Summary * BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19045.2965/22H2/2022Update) Intel Core i7-5600U CPU 2.60GHz (Broadwell), 1 CPU, 4 logical and 2 physical cores .NET SDK=7.0.201 [Host] : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 DefaultJob : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 | Method | Amount | Mean | Error | StdDev | Allocated | |------------------------------- |------- |-------------:|-----------:|-----------:|------------:| | GenerateRandomExercises | 1 | 33.28 us | 0.357 us | 0.298 us | 11.02 KB | | GenerateRandomExercises_Insane | 1 | 46.10 us | 0.340 us | 0.284 us | 14.83 KB | | GenerateRandomExercises | 10 | 314.87 us | 5.853 us | 5.475 us | 110.27 KB | | GenerateRandomExercises_Insane | 10 | 543.27 us | 7.763 us | 6.882 us | 149.27 KB | | GenerateRandomExercises | 100 | 3,222.10 us | 42.776 us | 35.720 us | 1103.91 KB | | GenerateRandomExercises_Insane | 100 | 4,714.66 us | 69.032 us | 64.573 us | 1480.3 KB | | GenerateRandomExercises | 1000 | 32,455.74 us | 644.823 us | 716.719 us | 11025.3 KB | | GenerateRandomExercises_Insane | 1000 | 45,743.09 us | 728.414 us | 645.720 us | 14839.44 KB | // * Legends * Amount : Value of the 'Amount' parameter Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 us : 1 Microsecond (0.000001 sec) // ***** BenchmarkRunner: End ***** Run time: 00:02:31 (151.58 sec), executed benchmarks: 8 Global total time: 00:02:57 (177.41 sec), executed benchmarks: 8 // * Artifacts cleanup *","title":"Mental Exercise Factory"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/","text":"Metrics The following document provides an insight into the software metrics of the AMOGUS project. For the backend the source code complexity and the class coupling metrics are examined. AMOGUS is a web application, therefore the web application metrics are examined as well to give an insight to the frontend. Software testing metrics are a result from the testing described in the testplan . 1. Evaluation methods In this section the methods used to collect the chosen metrics are described. 1.1. Source Code Complexity and Class Coupling This projects source code complexity and class coupling are measured using the inbuilt feauture of the IDE Visual Studio 2022. To evaluate these metrics the results from the calculation of the IDE are gathered on a class level. Visual Studio aggregates the metrics of the functions of a class and provides this as a result. For the assembly level the median of the results of all classes within that assembly is calculated to exclude outliers. 1.2. Web Application Metrics The web application metrics are measured using the built in feature Lighthouse in Google Chrome. For this project this metric is measured in two rounds: Before optimizing images. After optimizing images. 2. Results In this section the results of the chosen metrics are displayed. 2.1. Source Code Complexity and Class Coupling Median of the code complexity of the overall AMOGUS project: Code Complexity Class Coupling Project AMOGUS (median) 5 10 The following tables show the calculated source code complexity and class coupling on a class level. They are grouped by the assemblies of AMOGUS. assembly: AMOGUS VALIDATION Code Complexity Class Coupling assembly: AMOGUS VALIDATION (median) 1 10 RegisterValidator 1 10 StatsValidator 1 10 GameSessionValidator 1 10 AddValidators 1 2 assembly: AMOGUS INFRASTRUCTURE Code Complexity Class Coupling assembly: AMOGUS INFRASTRUCTURE (median) 6 17 DateTimeWrapper 3 4 UserMedalRepository 3 13 RoleManagerWrapper 3 15 GameSessionRepository 5 15 TokenFactory 6 21 DependecyInjection 6 34 UserStatsRepository 9 17 UserService 9 18 UserManagerWrapper 13 16 ApplicationDbContext 16 23 AuthService 22 38 assembly: AMOGUS CORE Code Complexity Class Coupling assembly: AMOGUS CORE (median) 4 3 DependencyInjection 2 2 UserRoles 1 0 Result 54 11 Result 69 12 ResultState 1 0 AuthFailureException 4 3 RecordNotFoundException 1 1 UserOperationException 4 3 IDateTime 2 1 IJwtConfiguration 3 0 IMailerConfiguration 4 0 IQuestionRepoConfiguration 1 0 JwtConfiguration 7 2 MailerConfiguration 9 2 QuestionRepoConfiguration 3 2 IApplicationDbContext 13 8 IRoleManager 2 3 IUserManager 12 8 IExerciseFactory 2 1 IExerciseService 3 3 IGameService 3 4 ILeaderboardService 1 2 ImailerService 2 1 IQuestionFileAccessor 7 5 IStatsService 4 6 IStreakService 2 3 IGameSessionRepository 4 5 IUserMedalRepository 2 3 IUserStatsRepository 7 5 ITokenFactory 4 6 ITeacherService 4 5 IAuthService 3 6 IUserService 3 4 LeaderboardApiModel 7 2 LeaderboardUserCorrectRatio 4 0 LeaderboardUserStreak 4 0 LoginApiModel 4 0 LoginResultApiModel 9 2 RegisterApiModel 6 0 UserApiModel 10 1 UserStatsApiModel 23 8 CategoryType 1 0 DifficultyType 1 0 UserMedalType 1 0 MailTextStatics 1 0 GameSession 24 8 Question 17 3 UserMedal 10 9 UserStats 21 6 MentalExerciseModel 16 2 MentalExerciseFactory 41 20 ExerciseService 16 12 GameService 9 23 QuestionFileAccessor 16 24 StatsService 24 29 StreaksService 8 10 LeaderboardService 8 14 MailerService 7 19 TeacherService 7 17 ApplicationUser 2 1 assembly: AMOGUS BENCHMARKS Code Complexity Class Coupling assembly: AMOGUS BENCHMARKS (median) 7 6 Program 2 3 MentalExerciseFactoryBenchmarks 7 6 ExerciseServiceBenchmarks 29 21 assembly: AMOGUS API Code Complexity Class Coupling AMOGUS API 5 19 Program 4 36 UserController 14 25 TeacherController 7 23 StatsController 8 19 InformationController 2 10 HealthController 1 6 GameController 10 24 AuthController 3 15 StreakUpdateScheduler 5 14 SendMailServiceScheduler 5 16 DependencyInjection 2 23 Looking at the results of these metrics it's possible to say that the code complexety is quite high with the values ranging from 4 to 7 in the assembly level. That could be explained due to a lot of validations and condition checking. As for the class coupling the high values could originate from a lot of utility classes (the services and repositories) being used throughout the project. Both high values could also be because of the class level aggregation that Visual Studio does. 2.2. Web Application Metrics The web application metrics are measured twice. The first time measuring before all the images on the page were optimized and the second measureing after optimizing the images. I.) Landingpage As seen in the result, the landing page of AMOGUS doesn not score as well in performance as it does in best practices and the largest contentful paint takes up to 3,5s to build. The main issue for the performance is statet in Lighthouse's recommendations as seen above: the images are too big. After scaling the logo, the parallax background and the badges down and changing the fileformats to svg and webp the performance increased. The largest contentful paint now only takes up 1,8s instead of 3,5s . Results after scaling images down: In the last image it is seen that the images in the landingpage now pass the tests from Lighthouse. The full Lighthouse test results for the landingpage can be found here: First results Second results (after scaling images down) II.) Statistics page The statistics page shows similar results to the landingpage. Due to badge having a big size and high resolution the largest contentful paint takes up 3,7s . After scaling down the badges and changing their format, performance in loding the statistics page significantly increased: The full Lighthouse test results for the statistics page can be found here: First results Second results (after scaling images down) III.) How-To-Play page Different than the previous pages was the How-To-Play page as here the perfamance was already at a good 91% with the largest contentful paint only taking up to 1,5s . That is the time the previous pages take after the optimizing of the images. The How-To-Play page only has 3 images. As they are important to be seen in a good quality and the performance is already good, these 3 images are not scaled down. To optimize it their fileformat is also changed to webp , resulting to a smlight increase in the performance: The full Lighthouse test results for the How-To-Play page can be found here: First results Second results (after scaling images down) 2.3. Software Testing Metrics All about the software testing metrics and the results of the testing can be found in the Test Report .","title":"Metrics"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/#metrics","text":"The following document provides an insight into the software metrics of the AMOGUS project. For the backend the source code complexity and the class coupling metrics are examined. AMOGUS is a web application, therefore the web application metrics are examined as well to give an insight to the frontend. Software testing metrics are a result from the testing described in the testplan .","title":"Metrics"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/#1-evaluation-methods","text":"In this section the methods used to collect the chosen metrics are described.","title":"1. Evaluation methods"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/#11-source-code-complexity-and-class-coupling","text":"This projects source code complexity and class coupling are measured using the inbuilt feauture of the IDE Visual Studio 2022. To evaluate these metrics the results from the calculation of the IDE are gathered on a class level. Visual Studio aggregates the metrics of the functions of a class and provides this as a result. For the assembly level the median of the results of all classes within that assembly is calculated to exclude outliers.","title":"1.1. Source Code Complexity and Class Coupling"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/#12-web-application-metrics","text":"The web application metrics are measured using the built in feature Lighthouse in Google Chrome. For this project this metric is measured in two rounds: Before optimizing images. After optimizing images.","title":"1.2. Web Application Metrics"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/#2-results","text":"In this section the results of the chosen metrics are displayed.","title":"2. Results"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/#21-source-code-complexity-and-class-coupling","text":"Median of the code complexity of the overall AMOGUS project: Code Complexity Class Coupling Project AMOGUS (median) 5 10 The following tables show the calculated source code complexity and class coupling on a class level. They are grouped by the assemblies of AMOGUS. assembly: AMOGUS VALIDATION Code Complexity Class Coupling assembly: AMOGUS VALIDATION (median) 1 10 RegisterValidator 1 10 StatsValidator 1 10 GameSessionValidator 1 10 AddValidators 1 2 assembly: AMOGUS INFRASTRUCTURE Code Complexity Class Coupling assembly: AMOGUS INFRASTRUCTURE (median) 6 17 DateTimeWrapper 3 4 UserMedalRepository 3 13 RoleManagerWrapper 3 15 GameSessionRepository 5 15 TokenFactory 6 21 DependecyInjection 6 34 UserStatsRepository 9 17 UserService 9 18 UserManagerWrapper 13 16 ApplicationDbContext 16 23 AuthService 22 38 assembly: AMOGUS CORE Code Complexity Class Coupling assembly: AMOGUS CORE (median) 4 3 DependencyInjection 2 2 UserRoles 1 0 Result 54 11 Result 69 12 ResultState 1 0 AuthFailureException 4 3 RecordNotFoundException 1 1 UserOperationException 4 3 IDateTime 2 1 IJwtConfiguration 3 0 IMailerConfiguration 4 0 IQuestionRepoConfiguration 1 0 JwtConfiguration 7 2 MailerConfiguration 9 2 QuestionRepoConfiguration 3 2 IApplicationDbContext 13 8 IRoleManager 2 3 IUserManager 12 8 IExerciseFactory 2 1 IExerciseService 3 3 IGameService 3 4 ILeaderboardService 1 2 ImailerService 2 1 IQuestionFileAccessor 7 5 IStatsService 4 6 IStreakService 2 3 IGameSessionRepository 4 5 IUserMedalRepository 2 3 IUserStatsRepository 7 5 ITokenFactory 4 6 ITeacherService 4 5 IAuthService 3 6 IUserService 3 4 LeaderboardApiModel 7 2 LeaderboardUserCorrectRatio 4 0 LeaderboardUserStreak 4 0 LoginApiModel 4 0 LoginResultApiModel 9 2 RegisterApiModel 6 0 UserApiModel 10 1 UserStatsApiModel 23 8 CategoryType 1 0 DifficultyType 1 0 UserMedalType 1 0 MailTextStatics 1 0 GameSession 24 8 Question 17 3 UserMedal 10 9 UserStats 21 6 MentalExerciseModel 16 2 MentalExerciseFactory 41 20 ExerciseService 16 12 GameService 9 23 QuestionFileAccessor 16 24 StatsService 24 29 StreaksService 8 10 LeaderboardService 8 14 MailerService 7 19 TeacherService 7 17 ApplicationUser 2 1 assembly: AMOGUS BENCHMARKS Code Complexity Class Coupling assembly: AMOGUS BENCHMARKS (median) 7 6 Program 2 3 MentalExerciseFactoryBenchmarks 7 6 ExerciseServiceBenchmarks 29 21 assembly: AMOGUS API Code Complexity Class Coupling AMOGUS API 5 19 Program 4 36 UserController 14 25 TeacherController 7 23 StatsController 8 19 InformationController 2 10 HealthController 1 6 GameController 10 24 AuthController 3 15 StreakUpdateScheduler 5 14 SendMailServiceScheduler 5 16 DependencyInjection 2 23 Looking at the results of these metrics it's possible to say that the code complexety is quite high with the values ranging from 4 to 7 in the assembly level. That could be explained due to a lot of validations and condition checking. As for the class coupling the high values could originate from a lot of utility classes (the services and repositories) being used throughout the project. Both high values could also be because of the class level aggregation that Visual Studio does.","title":"2.1. Source Code Complexity and Class Coupling"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/#22-web-application-metrics","text":"The web application metrics are measured twice. The first time measuring before all the images on the page were optimized and the second measureing after optimizing the images. I.) Landingpage As seen in the result, the landing page of AMOGUS doesn not score as well in performance as it does in best practices and the largest contentful paint takes up to 3,5s to build. The main issue for the performance is statet in Lighthouse's recommendations as seen above: the images are too big. After scaling the logo, the parallax background and the badges down and changing the fileformats to svg and webp the performance increased. The largest contentful paint now only takes up 1,8s instead of 3,5s . Results after scaling images down: In the last image it is seen that the images in the landingpage now pass the tests from Lighthouse. The full Lighthouse test results for the landingpage can be found here: First results Second results (after scaling images down) II.) Statistics page The statistics page shows similar results to the landingpage. Due to badge having a big size and high resolution the largest contentful paint takes up 3,7s . After scaling down the badges and changing their format, performance in loding the statistics page significantly increased: The full Lighthouse test results for the statistics page can be found here: First results Second results (after scaling images down) III.) How-To-Play page Different than the previous pages was the How-To-Play page as here the perfamance was already at a good 91% with the largest contentful paint only taking up to 1,5s . That is the time the previous pages take after the optimizing of the images. The How-To-Play page only has 3 images. As they are important to be seen in a good quality and the performance is already good, these 3 images are not scaled down. To optimize it their fileformat is also changed to webp , resulting to a smlight increase in the performance: The full Lighthouse test results for the How-To-Play page can be found here: First results Second results (after scaling images down)","title":"2.2.  Web Application Metrics"},{"location":"Developer%20Docs/5.%20Metrics/Metrics/#23-software-testing-metrics","text":"All about the software testing metrics and the results of the testing can be found in the Test Report .","title":"2.3. Software Testing Metrics"},{"location":"Developer%20Docs/5.%20Metrics/Web%20Application%20Metrics/First%20Results/HowToPage/","text":"","title":"HowToPage"},{"location":"Developer%20Docs/5.%20Metrics/Web%20Application%20Metrics/First%20Results/Landingpage/","text":"","title":"Landingpage"},{"location":"Developer%20Docs/5.%20Metrics/Web%20Application%20Metrics/First%20Results/Statisticspage/","text":"","title":"Statisticspage"},{"location":"Developer%20Docs/5.%20Metrics/Web%20Application%20Metrics/Second%20Results/HowToPage/","text":"","title":"HowToPage"},{"location":"Developer%20Docs/5.%20Metrics/Web%20Application%20Metrics/Second%20Results/Landingpage/","text":"","title":"Landingpage"},{"location":"Developer%20Docs/5.%20Metrics/Web%20Application%20Metrics/Second%20Results/Statisticspage/","text":"","title":"Statisticspage"},{"location":"Developer%20Docs/6.%20CICD/CICDDoc/","text":"CI/CD Documentation CI Workflows On every Pull Request to the main branch, that edits the ./src/ folder, following Workflows get executed. Build the api and the ui (check if everything compiles right) name : Build on Pull Request on : pull_request : branches : [ main ] paths : - src/** jobs : build : runs-on : ubuntu-latest steps : - name : Checkout code uses : actions/checkout@v2 - name : Setup .NET Core uses : actions/setup-dotnet@v1 with : dotnet-version : '6.0.x' - name : Setup Node.js uses : actions/setup-node@v2 with : node-version : '14.x' - name : Install dependencies run : | cd src/api/AMOGUS.Api dotnet restore cd ../../ui npm install - name : Build run : | cd src/api/AMOGUS.Api dotnet build cd ../../ui npm run build This workflow checks out the repository and tries to build the dotnet project and the angular project. If any of them fail, the workflow fails and the pull request gets rejected. Run all Unit Tests name : Test on Pull Request on : pull_request : branches : [ main ] paths : - src/api/** jobs : test : runs-on : ubuntu-latest steps : - name : Checkout code uses : actions/checkout@v2 - name : Setup .NET Environment uses : actions/setup-dotnet@v1 with : dotnet-version : '6.0.x' - name : Run Unit Tests run : | cd src/api/AMOGUS.UnitTests rm -rf coverage rm -rf TestResults dotnet tool install -g dotnet-reportgenerator-globaltool dotnet test --logger \"console;verbosity=detailed\" --collect:\"XPlat Code Coverage\" reportgenerator \"-reports:TestResults/*/coverage*\" \"-targetdir:coverage\" \"-reporttypes:TextSummary\" \"-classfilters:-AMOGUS.Core.Common*;-AMOGUS.Core.DataTransferObjects*;-AMOGUS.*.DependencyInjection;-AMOGUS.Core.Domain*;-AMOGUS.Infrastructure.Identity*;-AMOGUS.Infrastructure.Persistence*\" cat coverage/Summary.txt rm -rf coverage rm -rf TestResults This workflow triggers when the api gets edited in the pull request. It checksout our repository and runs all unit tests in the AMOGUS.UnitTests assembly. If any test fails the workflow fails and the pull request gets rejected. Additionally, a code coverage report is generated that looks something like this. CD Workflows When something gets pushed to the main branch two workflows could be triggered: Deploy API - When the src/api folder gets updated name : Build & Redeploy Api on : push : branches : [ main ] paths : - src/api/** jobs : build : runs-on : ubuntu-latest steps : - name : Checkout code uses : actions/checkout@v2 - name : Setup .NET 6 uses : actions/setup-dotnet@v1 with : dotnet-version : '6.0.x' - name : Dependencies run : | cd src/api/AMOGUS.Api dotnet restore - name : Build run : | cd src/api/AMOGUS.Api dotnet build docker : name : Publish runs-on : ubuntu-latest needs : [ build ] env : REPO : ${{ secrets.DOCKER_REPO_API }} steps : - uses : actions/checkout@v2 - name : Login to REPO run : docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }} - name : Build Image run : docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} -f src/api/AMOGUS.Api/Dockerfile src/api - name : Publish Image run : docker push $REPO redeploy : name : Redeploy webhook call runs-on : ubuntu-latest needs : [ docker ] steps : - name : Deploy docker container webhook uses : joelwmale/webhook-action@master with : url : ${{ secrets.DEPLOY_WEBHOOK_URL_API }} headers : ${{ secrets.DEPLOY_WEBHOOK_HEADER_API }} This workflow builds a docker image from the API, pushes it to our DockerHub repository and sends a webhook to our deployment script on our server. Deploy UI - When the src/ui folder gets updated name : Build & Redeploy UI on : push : branches : [ main ] paths : - src/ui/** jobs : build : runs-on : ubuntu-latest steps : - name : Checkout code uses : actions/checkout@v2 - name : Setup Node.js uses : actions/setup-node@v2 with : node-version : '14.x' - name : Install dependencies run : | cd src/ui npm install - name : Build run : | cd src/ui npm run build docker : name : Publish runs-on : ubuntu-latest needs : [ build ] env : REPO : ${{ secrets.DOCKER_REPO_UI }} steps : - uses : actions/checkout@v2 - name : Login to REPO run : docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }} - name : Build Image run : docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} src/ui - name : Publish Image run : docker push $REPO redeploy : name : Redeploy webhook call runs-on : ubuntu-latest needs : [ docker ] steps : - name : Deploy docker container webhook uses : joelwmale/webhook-action@master with : url : ${{ secrets.DEPLOY_WEBHOOK_URL_UI }} headers : ${{ secrets.DEPLOY_WEBHOOK_HEADER_UI }} This workflow builds a docker image from the AMOGUS UI, pushes it to our DockerHub repository and sends a webhook to our deployment script on our server. Serverside The server uses the Webhooks package to create following endpoints [ { \"id\" : \"amogus-redeploy-api\" , \"execute-command\" : \"redeploy-api.sh\" , \"command-working-directory\" : \"/root/amogus\" , \"response-message\" : \"Redeploying AMOGUS Api\" , \"trigger-rule\" : { \"and\" : [ { \"match\" : { \"type\" : \"value\" , \"value\" : \"<INSERT API KEY>\" , \"parameter\" : { \"source\" : \"header\" , \"name\" : \"X-ApiKey\" } } } ] } }, { \"id\" : \"amogus-redeploy-ui\" , \"execute-command\" : \"redeploy-ui.sh\" , \"command-working-directory\" : \"/root/amogus\" , \"response-message\" : \"Redeploying AMOGUS UI\" , \"trigger-rule\" : { \"and\" : [ { \"match\" : { \"type\" : \"value\" , \"value\" : \"<INSERT API KEY>\" , \"parameter\" : { \"source\" : \"header\" , \"name\" : \"X-ApiKey\" } } } ] } } ] When a request comes in (of course with the correct api key), it starts the build script which pulls the docker image from the DockerHub repo, stops the running container, prunes all remaining artifacts and runs the new container with all required environment variables.","title":"CI/CD Documentation"},{"location":"Developer%20Docs/6.%20CICD/CICDDoc/#cicd-documentation","text":"","title":"CI/CD Documentation"},{"location":"Developer%20Docs/6.%20CICD/CICDDoc/#ci-workflows","text":"On every Pull Request to the main branch, that edits the ./src/ folder, following Workflows get executed. Build the api and the ui (check if everything compiles right) name : Build on Pull Request on : pull_request : branches : [ main ] paths : - src/** jobs : build : runs-on : ubuntu-latest steps : - name : Checkout code uses : actions/checkout@v2 - name : Setup .NET Core uses : actions/setup-dotnet@v1 with : dotnet-version : '6.0.x' - name : Setup Node.js uses : actions/setup-node@v2 with : node-version : '14.x' - name : Install dependencies run : | cd src/api/AMOGUS.Api dotnet restore cd ../../ui npm install - name : Build run : | cd src/api/AMOGUS.Api dotnet build cd ../../ui npm run build This workflow checks out the repository and tries to build the dotnet project and the angular project. If any of them fail, the workflow fails and the pull request gets rejected. Run all Unit Tests name : Test on Pull Request on : pull_request : branches : [ main ] paths : - src/api/** jobs : test : runs-on : ubuntu-latest steps : - name : Checkout code uses : actions/checkout@v2 - name : Setup .NET Environment uses : actions/setup-dotnet@v1 with : dotnet-version : '6.0.x' - name : Run Unit Tests run : | cd src/api/AMOGUS.UnitTests rm -rf coverage rm -rf TestResults dotnet tool install -g dotnet-reportgenerator-globaltool dotnet test --logger \"console;verbosity=detailed\" --collect:\"XPlat Code Coverage\" reportgenerator \"-reports:TestResults/*/coverage*\" \"-targetdir:coverage\" \"-reporttypes:TextSummary\" \"-classfilters:-AMOGUS.Core.Common*;-AMOGUS.Core.DataTransferObjects*;-AMOGUS.*.DependencyInjection;-AMOGUS.Core.Domain*;-AMOGUS.Infrastructure.Identity*;-AMOGUS.Infrastructure.Persistence*\" cat coverage/Summary.txt rm -rf coverage rm -rf TestResults This workflow triggers when the api gets edited in the pull request. It checksout our repository and runs all unit tests in the AMOGUS.UnitTests assembly. If any test fails the workflow fails and the pull request gets rejected. Additionally, a code coverage report is generated that looks something like this.","title":"CI Workflows"},{"location":"Developer%20Docs/6.%20CICD/CICDDoc/#cd-workflows","text":"When something gets pushed to the main branch two workflows could be triggered: Deploy API - When the src/api folder gets updated name : Build & Redeploy Api on : push : branches : [ main ] paths : - src/api/** jobs : build : runs-on : ubuntu-latest steps : - name : Checkout code uses : actions/checkout@v2 - name : Setup .NET 6 uses : actions/setup-dotnet@v1 with : dotnet-version : '6.0.x' - name : Dependencies run : | cd src/api/AMOGUS.Api dotnet restore - name : Build run : | cd src/api/AMOGUS.Api dotnet build docker : name : Publish runs-on : ubuntu-latest needs : [ build ] env : REPO : ${{ secrets.DOCKER_REPO_API }} steps : - uses : actions/checkout@v2 - name : Login to REPO run : docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }} - name : Build Image run : docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} -f src/api/AMOGUS.Api/Dockerfile src/api - name : Publish Image run : docker push $REPO redeploy : name : Redeploy webhook call runs-on : ubuntu-latest needs : [ docker ] steps : - name : Deploy docker container webhook uses : joelwmale/webhook-action@master with : url : ${{ secrets.DEPLOY_WEBHOOK_URL_API }} headers : ${{ secrets.DEPLOY_WEBHOOK_HEADER_API }} This workflow builds a docker image from the API, pushes it to our DockerHub repository and sends a webhook to our deployment script on our server. Deploy UI - When the src/ui folder gets updated name : Build & Redeploy UI on : push : branches : [ main ] paths : - src/ui/** jobs : build : runs-on : ubuntu-latest steps : - name : Checkout code uses : actions/checkout@v2 - name : Setup Node.js uses : actions/setup-node@v2 with : node-version : '14.x' - name : Install dependencies run : | cd src/ui npm install - name : Build run : | cd src/ui npm run build docker : name : Publish runs-on : ubuntu-latest needs : [ build ] env : REPO : ${{ secrets.DOCKER_REPO_UI }} steps : - uses : actions/checkout@v2 - name : Login to REPO run : docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }} - name : Build Image run : docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} src/ui - name : Publish Image run : docker push $REPO redeploy : name : Redeploy webhook call runs-on : ubuntu-latest needs : [ docker ] steps : - name : Deploy docker container webhook uses : joelwmale/webhook-action@master with : url : ${{ secrets.DEPLOY_WEBHOOK_URL_UI }} headers : ${{ secrets.DEPLOY_WEBHOOK_HEADER_UI }} This workflow builds a docker image from the AMOGUS UI, pushes it to our DockerHub repository and sends a webhook to our deployment script on our server.","title":"CD Workflows"},{"location":"Developer%20Docs/6.%20CICD/CICDDoc/#serverside","text":"The server uses the Webhooks package to create following endpoints [ { \"id\" : \"amogus-redeploy-api\" , \"execute-command\" : \"redeploy-api.sh\" , \"command-working-directory\" : \"/root/amogus\" , \"response-message\" : \"Redeploying AMOGUS Api\" , \"trigger-rule\" : { \"and\" : [ { \"match\" : { \"type\" : \"value\" , \"value\" : \"<INSERT API KEY>\" , \"parameter\" : { \"source\" : \"header\" , \"name\" : \"X-ApiKey\" } } } ] } }, { \"id\" : \"amogus-redeploy-ui\" , \"execute-command\" : \"redeploy-ui.sh\" , \"command-working-directory\" : \"/root/amogus\" , \"response-message\" : \"Redeploying AMOGUS UI\" , \"trigger-rule\" : { \"and\" : [ { \"match\" : { \"type\" : \"value\" , \"value\" : \"<INSERT API KEY>\" , \"parameter\" : { \"source\" : \"header\" , \"name\" : \"X-ApiKey\" } } } ] } } ] When a request comes in (of course with the correct api key), it starts the build script which pulls the docker image from the DockerHub repo, stops the running container, prunes all remaining artifacts and runs the new container with all required environment variables.","title":"Serverside"},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/","text":"First Color Scheme Rewampt Color Scheme (Version 2.0) Background colors: 040505 161C27 404752 7C838F Font color: FFFFFF Highlight colors: 56B6C2 4D7AAF 384094 Pichart colors: C678DD DF9A59 FFFF33 Other colors: CC0000 - wrong answer 19C819 - correct answer","title":"Color Scheme"},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#first-color-scheme","text":"","title":"First Color Scheme"},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#rewampt-color-scheme-version-20","text":"Background colors:","title":"Rewampt Color Scheme (Version 2.0)"},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#040505","text":"","title":"040505 "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#161c27","text":"","title":"161C27 "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#404752","text":"","title":"404752 "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#7c838f","text":"Font color:","title":"7C838F "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#ffffff","text":"Highlight colors:","title":"FFFFFF"},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#56b6c2","text":"","title":"56B6C2 "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#4d7aaf","text":"","title":"4D7AAF "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#384094","text":"Pichart colors:","title":"384094 "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#c678dd","text":"","title":"C678DD "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#df9a59","text":"","title":"DF9A59 "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#ffff33","text":"Other colors:","title":"FFFF33 "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#cc0000-wrong-answer","text":"","title":"CC0000 - wrong answer "},{"location":"Developer%20Docs/7.%20Conventions/Color%20Scheme/#19c819-correct-answer","text":"","title":"19C819 - correct answer"},{"location":"Developer%20Docs/8.%20Review/technical_review/","text":"Technical Review - AMOGUS Performed on 05-28-2023 Meeting start: 13:26 Meeting end: 15:30 Goal: The goal of this meeting is to take a closer look at the three main components of the AMOGUS project in terms of their technical realization. These are the game component in the frontend, the exercise service and the mental exercise factory. Component Criteria for review Why we've chosen this game component security The main UI component to display the gameplay maintainability usablility exercise service security This service orchestrates the exercise retrieval and generation source code correctness performance mental exercise factory source code correctness This factory generates random mental exercises well balanced difficulty performance Review Methodology Component Methodology game component code walkthrough fromal inspection exercise service benchmarks code walkthrough mental exercise factory benchmarks code walkthrough Outcome Game component Action Comment Responsible Done? refactoring code The component has some strange code styles, we need to refactor that Nick Huebner Tbd encode session JSON object to base64 The JSON object can be spied via the network tab of the browser, what willgive you the results of questions. Therefore we need to encode the object Jasmin Huebner Done! Exercise Service Action Comment Responsible Done? benchmark tests Benchmarks for different categories and different difficulties (10 questions each), Benchmarks for time usage and allocation Alexander Hagl Done! Mental Exercise Factory Action Comment Responsible Done? benchmark tests Median try count for million questions, Time for generate a question, Allocation tests Alexander Hagl Done! refactoring The CalcXp and GenerateExpression Methods are very difficult to understand Alexander Hagl Done! Lessions learned Security is not that easy to achieve Code can easily get complicated to understand (clean code matters) external libraries can help to simplify the code add website source links to comments if needed","title":"Technical Review - AMOGUS"},{"location":"Developer%20Docs/8.%20Review/technical_review/#technical-review-amogus","text":"Performed on 05-28-2023 Meeting start: 13:26 Meeting end: 15:30 Goal: The goal of this meeting is to take a closer look at the three main components of the AMOGUS project in terms of their technical realization. These are the game component in the frontend, the exercise service and the mental exercise factory. Component Criteria for review Why we've chosen this game component security The main UI component to display the gameplay maintainability usablility exercise service security This service orchestrates the exercise retrieval and generation source code correctness performance mental exercise factory source code correctness This factory generates random mental exercises well balanced difficulty performance","title":"Technical Review - AMOGUS"},{"location":"Developer%20Docs/8.%20Review/technical_review/#review-methodology","text":"Component Methodology game component code walkthrough fromal inspection exercise service benchmarks code walkthrough mental exercise factory benchmarks code walkthrough","title":"Review Methodology"},{"location":"Developer%20Docs/8.%20Review/technical_review/#outcome","text":"","title":"Outcome"},{"location":"Developer%20Docs/8.%20Review/technical_review/#game-component","text":"Action Comment Responsible Done? refactoring code The component has some strange code styles, we need to refactor that Nick Huebner Tbd encode session JSON object to base64 The JSON object can be spied via the network tab of the browser, what willgive you the results of questions. Therefore we need to encode the object Jasmin Huebner Done!","title":"Game component"},{"location":"Developer%20Docs/8.%20Review/technical_review/#exercise-service","text":"Action Comment Responsible Done? benchmark tests Benchmarks for different categories and different difficulties (10 questions each), Benchmarks for time usage and allocation Alexander Hagl Done!","title":"Exercise Service"},{"location":"Developer%20Docs/8.%20Review/technical_review/#mental-exercise-factory","text":"Action Comment Responsible Done? benchmark tests Median try count for million questions, Time for generate a question, Allocation tests Alexander Hagl Done! refactoring The CalcXp and GenerateExpression Methods are very difficult to understand Alexander Hagl Done!","title":"Mental Exercise Factory"},{"location":"Developer%20Docs/8.%20Review/technical_review/#lessions-learned","text":"Security is not that easy to achieve Code can easily get complicated to understand (clean code matters) external libraries can help to simplify the code add website source links to comments if needed","title":"Lessions learned"}]}